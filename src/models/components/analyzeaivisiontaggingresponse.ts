/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AIVisionTaggingAnalysisData,
  AIVisionTaggingAnalysisData$inboundSchema,
  AIVisionTaggingAnalysisData$Outbound,
  AIVisionTaggingAnalysisData$outboundSchema,
} from "./aivisiontagginganalysisdata.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";

export type AnalyzeAIVisionTaggingResponseData = {
  entity?: string | undefined;
  analysis?: AIVisionTaggingAnalysisData | undefined;
};

export type AnalyzeAIVisionTaggingResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeAIVisionTaggingResponseData | undefined;
};

/** @internal */
export const AnalyzeAIVisionTaggingResponseData$inboundSchema: z.ZodType<
  AnalyzeAIVisionTaggingResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: AIVisionTaggingAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeAIVisionTaggingResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: AIVisionTaggingAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeAIVisionTaggingResponseData$outboundSchema: z.ZodType<
  AnalyzeAIVisionTaggingResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeAIVisionTaggingResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: AIVisionTaggingAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeAIVisionTaggingResponseData$ {
  /** @deprecated use `AnalyzeAIVisionTaggingResponseData$inboundSchema` instead. */
  export const inboundSchema = AnalyzeAIVisionTaggingResponseData$inboundSchema;
  /** @deprecated use `AnalyzeAIVisionTaggingResponseData$outboundSchema` instead. */
  export const outboundSchema =
    AnalyzeAIVisionTaggingResponseData$outboundSchema;
  /** @deprecated use `AnalyzeAIVisionTaggingResponseData$Outbound` instead. */
  export type Outbound = AnalyzeAIVisionTaggingResponseData$Outbound;
}

export function analyzeAIVisionTaggingResponseDataToJSON(
  analyzeAIVisionTaggingResponseData: AnalyzeAIVisionTaggingResponseData,
): string {
  return JSON.stringify(
    AnalyzeAIVisionTaggingResponseData$outboundSchema.parse(
      analyzeAIVisionTaggingResponseData,
    ),
  );
}

export function analyzeAIVisionTaggingResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeAIVisionTaggingResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AnalyzeAIVisionTaggingResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeAIVisionTaggingResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeAIVisionTaggingResponse$inboundSchema: z.ZodType<
  AnalyzeAIVisionTaggingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeAIVisionTaggingResponseData$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeAIVisionTaggingResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeAIVisionTaggingResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeAIVisionTaggingResponse$outboundSchema: z.ZodType<
  AnalyzeAIVisionTaggingResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeAIVisionTaggingResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeAIVisionTaggingResponseData$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeAIVisionTaggingResponse$ {
  /** @deprecated use `AnalyzeAIVisionTaggingResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeAIVisionTaggingResponse$inboundSchema;
  /** @deprecated use `AnalyzeAIVisionTaggingResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeAIVisionTaggingResponse$outboundSchema;
  /** @deprecated use `AnalyzeAIVisionTaggingResponse$Outbound` instead. */
  export type Outbound = AnalyzeAIVisionTaggingResponse$Outbound;
}

export function analyzeAIVisionTaggingResponseToJSON(
  analyzeAIVisionTaggingResponse: AnalyzeAIVisionTaggingResponse,
): string {
  return JSON.stringify(
    AnalyzeAIVisionTaggingResponse$outboundSchema.parse(
      analyzeAIVisionTaggingResponse,
    ),
  );
}

export function analyzeAIVisionTaggingResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeAIVisionTaggingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeAIVisionTaggingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeAIVisionTaggingResponse' from JSON`,
  );
}
