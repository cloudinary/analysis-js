/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HumanAnatomyAnalysisData,
  HumanAnatomyAnalysisData$inboundSchema,
  HumanAnatomyAnalysisData$Outbound,
  HumanAnatomyAnalysisData$outboundSchema,
} from "./humananatomyanalysisdata.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";

export type AnalyzeHumanAnatomyResponseData = {
  entity?: string | undefined;
  analysis?: HumanAnatomyAnalysisData | undefined;
};

export type AnalyzeHumanAnatomyResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeHumanAnatomyResponseData | undefined;
};

/** @internal */
export const AnalyzeHumanAnatomyResponseData$inboundSchema: z.ZodType<
  AnalyzeHumanAnatomyResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: HumanAnatomyAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeHumanAnatomyResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: HumanAnatomyAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeHumanAnatomyResponseData$outboundSchema: z.ZodType<
  AnalyzeHumanAnatomyResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeHumanAnatomyResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: HumanAnatomyAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeHumanAnatomyResponseData$ {
  /** @deprecated use `AnalyzeHumanAnatomyResponseData$inboundSchema` instead. */
  export const inboundSchema = AnalyzeHumanAnatomyResponseData$inboundSchema;
  /** @deprecated use `AnalyzeHumanAnatomyResponseData$outboundSchema` instead. */
  export const outboundSchema = AnalyzeHumanAnatomyResponseData$outboundSchema;
  /** @deprecated use `AnalyzeHumanAnatomyResponseData$Outbound` instead. */
  export type Outbound = AnalyzeHumanAnatomyResponseData$Outbound;
}

export function analyzeHumanAnatomyResponseDataToJSON(
  analyzeHumanAnatomyResponseData: AnalyzeHumanAnatomyResponseData,
): string {
  return JSON.stringify(
    AnalyzeHumanAnatomyResponseData$outboundSchema.parse(
      analyzeHumanAnatomyResponseData,
    ),
  );
}

export function analyzeHumanAnatomyResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeHumanAnatomyResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeHumanAnatomyResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeHumanAnatomyResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeHumanAnatomyResponse$inboundSchema: z.ZodType<
  AnalyzeHumanAnatomyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeHumanAnatomyResponseData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeHumanAnatomyResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeHumanAnatomyResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeHumanAnatomyResponse$outboundSchema: z.ZodType<
  AnalyzeHumanAnatomyResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeHumanAnatomyResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeHumanAnatomyResponseData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeHumanAnatomyResponse$ {
  /** @deprecated use `AnalyzeHumanAnatomyResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeHumanAnatomyResponse$inboundSchema;
  /** @deprecated use `AnalyzeHumanAnatomyResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeHumanAnatomyResponse$outboundSchema;
  /** @deprecated use `AnalyzeHumanAnatomyResponse$Outbound` instead. */
  export type Outbound = AnalyzeHumanAnatomyResponse$Outbound;
}

export function analyzeHumanAnatomyResponseToJSON(
  analyzeHumanAnatomyResponse: AnalyzeHumanAnatomyResponse,
): string {
  return JSON.stringify(
    AnalyzeHumanAnatomyResponse$outboundSchema.parse(
      analyzeHumanAnatomyResponse,
    ),
  );
}

export function analyzeHumanAnatomyResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeHumanAnatomyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeHumanAnatomyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeHumanAnatomyResponse' from JSON`,
  );
}
