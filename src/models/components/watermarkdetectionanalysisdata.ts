/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Detections = {
  name: string;
  confidence: number;
};

export type WatermarkDetectionAnalysisData = {
  detections?: Array<Detections> | undefined;
  modelVersion?: number | undefined;
};

/** @internal */
export const Detections$inboundSchema: z.ZodType<
  Detections,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  confidence: z.number(),
});

/** @internal */
export type Detections$Outbound = {
  name: string;
  confidence: number;
};

/** @internal */
export const Detections$outboundSchema: z.ZodType<
  Detections$Outbound,
  z.ZodTypeDef,
  Detections
> = z.object({
  name: z.string(),
  confidence: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Detections$ {
  /** @deprecated use `Detections$inboundSchema` instead. */
  export const inboundSchema = Detections$inboundSchema;
  /** @deprecated use `Detections$outboundSchema` instead. */
  export const outboundSchema = Detections$outboundSchema;
  /** @deprecated use `Detections$Outbound` instead. */
  export type Outbound = Detections$Outbound;
}

export function detectionsToJSON(detections: Detections): string {
  return JSON.stringify(Detections$outboundSchema.parse(detections));
}

export function detectionsFromJSON(
  jsonString: string,
): SafeParseResult<Detections, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Detections$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Detections' from JSON`,
  );
}

/** @internal */
export const WatermarkDetectionAnalysisData$inboundSchema: z.ZodType<
  WatermarkDetectionAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  detections: z.array(z.lazy(() => Detections$inboundSchema)).optional(),
  model_version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_version": "modelVersion",
  });
});

/** @internal */
export type WatermarkDetectionAnalysisData$Outbound = {
  detections?: Array<Detections$Outbound> | undefined;
  model_version?: number | undefined;
};

/** @internal */
export const WatermarkDetectionAnalysisData$outboundSchema: z.ZodType<
  WatermarkDetectionAnalysisData$Outbound,
  z.ZodTypeDef,
  WatermarkDetectionAnalysisData
> = z.object({
  detections: z.array(z.lazy(() => Detections$outboundSchema)).optional(),
  modelVersion: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    modelVersion: "model_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WatermarkDetectionAnalysisData$ {
  /** @deprecated use `WatermarkDetectionAnalysisData$inboundSchema` instead. */
  export const inboundSchema = WatermarkDetectionAnalysisData$inboundSchema;
  /** @deprecated use `WatermarkDetectionAnalysisData$outboundSchema` instead. */
  export const outboundSchema = WatermarkDetectionAnalysisData$outboundSchema;
  /** @deprecated use `WatermarkDetectionAnalysisData$Outbound` instead. */
  export type Outbound = WatermarkDetectionAnalysisData$Outbound;
}

export function watermarkDetectionAnalysisDataToJSON(
  watermarkDetectionAnalysisData: WatermarkDetectionAnalysisData,
): string {
  return JSON.stringify(
    WatermarkDetectionAnalysisData$outboundSchema.parse(
      watermarkDetectionAnalysisData,
    ),
  );
}

export function watermarkDetectionAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<WatermarkDetectionAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WatermarkDetectionAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WatermarkDetectionAnalysisData' from JSON`,
  );
}
