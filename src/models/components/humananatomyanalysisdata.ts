/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HumanAnatomyAnalysisDataTags = {};

export type HumanAnatomyAnalysisData = {
  tags: HumanAnatomyAnalysisDataTags;
  modelVersion?: number | undefined;
};

/** @internal */
export const HumanAnatomyAnalysisDataTags$inboundSchema: z.ZodType<
  HumanAnatomyAnalysisDataTags,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HumanAnatomyAnalysisDataTags$Outbound = {};

/** @internal */
export const HumanAnatomyAnalysisDataTags$outboundSchema: z.ZodType<
  HumanAnatomyAnalysisDataTags$Outbound,
  z.ZodTypeDef,
  HumanAnatomyAnalysisDataTags
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HumanAnatomyAnalysisDataTags$ {
  /** @deprecated use `HumanAnatomyAnalysisDataTags$inboundSchema` instead. */
  export const inboundSchema = HumanAnatomyAnalysisDataTags$inboundSchema;
  /** @deprecated use `HumanAnatomyAnalysisDataTags$outboundSchema` instead. */
  export const outboundSchema = HumanAnatomyAnalysisDataTags$outboundSchema;
  /** @deprecated use `HumanAnatomyAnalysisDataTags$Outbound` instead. */
  export type Outbound = HumanAnatomyAnalysisDataTags$Outbound;
}

export function humanAnatomyAnalysisDataTagsToJSON(
  humanAnatomyAnalysisDataTags: HumanAnatomyAnalysisDataTags,
): string {
  return JSON.stringify(
    HumanAnatomyAnalysisDataTags$outboundSchema.parse(
      humanAnatomyAnalysisDataTags,
    ),
  );
}

export function humanAnatomyAnalysisDataTagsFromJSON(
  jsonString: string,
): SafeParseResult<HumanAnatomyAnalysisDataTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HumanAnatomyAnalysisDataTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HumanAnatomyAnalysisDataTags' from JSON`,
  );
}

/** @internal */
export const HumanAnatomyAnalysisData$inboundSchema: z.ZodType<
  HumanAnatomyAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  tags: z.lazy(() => HumanAnatomyAnalysisDataTags$inboundSchema),
  model_version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_version": "modelVersion",
  });
});

/** @internal */
export type HumanAnatomyAnalysisData$Outbound = {
  tags: HumanAnatomyAnalysisDataTags$Outbound;
  model_version?: number | undefined;
};

/** @internal */
export const HumanAnatomyAnalysisData$outboundSchema: z.ZodType<
  HumanAnatomyAnalysisData$Outbound,
  z.ZodTypeDef,
  HumanAnatomyAnalysisData
> = z.object({
  tags: z.lazy(() => HumanAnatomyAnalysisDataTags$outboundSchema),
  modelVersion: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    modelVersion: "model_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HumanAnatomyAnalysisData$ {
  /** @deprecated use `HumanAnatomyAnalysisData$inboundSchema` instead. */
  export const inboundSchema = HumanAnatomyAnalysisData$inboundSchema;
  /** @deprecated use `HumanAnatomyAnalysisData$outboundSchema` instead. */
  export const outboundSchema = HumanAnatomyAnalysisData$outboundSchema;
  /** @deprecated use `HumanAnatomyAnalysisData$Outbound` instead. */
  export type Outbound = HumanAnatomyAnalysisData$Outbound;
}

export function humanAnatomyAnalysisDataToJSON(
  humanAnatomyAnalysisData: HumanAnatomyAnalysisData,
): string {
  return JSON.stringify(
    HumanAnatomyAnalysisData$outboundSchema.parse(humanAnatomyAnalysisData),
  );
}

export function humanAnatomyAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<HumanAnatomyAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HumanAnatomyAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HumanAnatomyAnalysisData' from JSON`,
  );
}
