/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AIVisionGeneralAnalysisDataResponse = {
  value?: string | undefined;
};

export type AIVisionGeneralAnalysisData = {
  responses: Array<AIVisionGeneralAnalysisDataResponse>;
  modelVersion?: number | undefined;
};

/** @internal */
export const AIVisionGeneralAnalysisDataResponse$inboundSchema: z.ZodType<
  AIVisionGeneralAnalysisDataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type AIVisionGeneralAnalysisDataResponse$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const AIVisionGeneralAnalysisDataResponse$outboundSchema: z.ZodType<
  AIVisionGeneralAnalysisDataResponse$Outbound,
  z.ZodTypeDef,
  AIVisionGeneralAnalysisDataResponse
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AIVisionGeneralAnalysisDataResponse$ {
  /** @deprecated use `AIVisionGeneralAnalysisDataResponse$inboundSchema` instead. */
  export const inboundSchema =
    AIVisionGeneralAnalysisDataResponse$inboundSchema;
  /** @deprecated use `AIVisionGeneralAnalysisDataResponse$outboundSchema` instead. */
  export const outboundSchema =
    AIVisionGeneralAnalysisDataResponse$outboundSchema;
  /** @deprecated use `AIVisionGeneralAnalysisDataResponse$Outbound` instead. */
  export type Outbound = AIVisionGeneralAnalysisDataResponse$Outbound;
}

export function aiVisionGeneralAnalysisDataResponseToJSON(
  aiVisionGeneralAnalysisDataResponse: AIVisionGeneralAnalysisDataResponse,
): string {
  return JSON.stringify(
    AIVisionGeneralAnalysisDataResponse$outboundSchema.parse(
      aiVisionGeneralAnalysisDataResponse,
    ),
  );
}

export function aiVisionGeneralAnalysisDataResponseFromJSON(
  jsonString: string,
): SafeParseResult<AIVisionGeneralAnalysisDataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AIVisionGeneralAnalysisDataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AIVisionGeneralAnalysisDataResponse' from JSON`,
  );
}

/** @internal */
export const AIVisionGeneralAnalysisData$inboundSchema: z.ZodType<
  AIVisionGeneralAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  responses: z.array(
    z.lazy(() => AIVisionGeneralAnalysisDataResponse$inboundSchema),
  ),
  model_version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_version": "modelVersion",
  });
});

/** @internal */
export type AIVisionGeneralAnalysisData$Outbound = {
  responses: Array<AIVisionGeneralAnalysisDataResponse$Outbound>;
  model_version?: number | undefined;
};

/** @internal */
export const AIVisionGeneralAnalysisData$outboundSchema: z.ZodType<
  AIVisionGeneralAnalysisData$Outbound,
  z.ZodTypeDef,
  AIVisionGeneralAnalysisData
> = z.object({
  responses: z.array(
    z.lazy(() => AIVisionGeneralAnalysisDataResponse$outboundSchema),
  ),
  modelVersion: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    modelVersion: "model_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AIVisionGeneralAnalysisData$ {
  /** @deprecated use `AIVisionGeneralAnalysisData$inboundSchema` instead. */
  export const inboundSchema = AIVisionGeneralAnalysisData$inboundSchema;
  /** @deprecated use `AIVisionGeneralAnalysisData$outboundSchema` instead. */
  export const outboundSchema = AIVisionGeneralAnalysisData$outboundSchema;
  /** @deprecated use `AIVisionGeneralAnalysisData$Outbound` instead. */
  export type Outbound = AIVisionGeneralAnalysisData$Outbound;
}

export function aiVisionGeneralAnalysisDataToJSON(
  aiVisionGeneralAnalysisData: AIVisionGeneralAnalysisData,
): string {
  return JSON.stringify(
    AIVisionGeneralAnalysisData$outboundSchema.parse(
      aiVisionGeneralAnalysisData,
    ),
  );
}

export function aiVisionGeneralAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<AIVisionGeneralAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AIVisionGeneralAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AIVisionGeneralAnalysisData' from JSON`,
  );
}
