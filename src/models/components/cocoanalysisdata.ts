/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CocoAnalysisDataTags = {};

export type CocoAnalysisData = {
  tags: CocoAnalysisDataTags;
  modelVersion?: number | undefined;
};

/** @internal */
export const CocoAnalysisDataTags$inboundSchema: z.ZodType<
  CocoAnalysisDataTags,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CocoAnalysisDataTags$Outbound = {};

/** @internal */
export const CocoAnalysisDataTags$outboundSchema: z.ZodType<
  CocoAnalysisDataTags$Outbound,
  z.ZodTypeDef,
  CocoAnalysisDataTags
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CocoAnalysisDataTags$ {
  /** @deprecated use `CocoAnalysisDataTags$inboundSchema` instead. */
  export const inboundSchema = CocoAnalysisDataTags$inboundSchema;
  /** @deprecated use `CocoAnalysisDataTags$outboundSchema` instead. */
  export const outboundSchema = CocoAnalysisDataTags$outboundSchema;
  /** @deprecated use `CocoAnalysisDataTags$Outbound` instead. */
  export type Outbound = CocoAnalysisDataTags$Outbound;
}

export function cocoAnalysisDataTagsToJSON(
  cocoAnalysisDataTags: CocoAnalysisDataTags,
): string {
  return JSON.stringify(
    CocoAnalysisDataTags$outboundSchema.parse(cocoAnalysisDataTags),
  );
}

export function cocoAnalysisDataTagsFromJSON(
  jsonString: string,
): SafeParseResult<CocoAnalysisDataTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CocoAnalysisDataTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CocoAnalysisDataTags' from JSON`,
  );
}

/** @internal */
export const CocoAnalysisData$inboundSchema: z.ZodType<
  CocoAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  tags: z.lazy(() => CocoAnalysisDataTags$inboundSchema),
  model_version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_version": "modelVersion",
  });
});

/** @internal */
export type CocoAnalysisData$Outbound = {
  tags: CocoAnalysisDataTags$Outbound;
  model_version?: number | undefined;
};

/** @internal */
export const CocoAnalysisData$outboundSchema: z.ZodType<
  CocoAnalysisData$Outbound,
  z.ZodTypeDef,
  CocoAnalysisData
> = z.object({
  tags: z.lazy(() => CocoAnalysisDataTags$outboundSchema),
  modelVersion: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    modelVersion: "model_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CocoAnalysisData$ {
  /** @deprecated use `CocoAnalysisData$inboundSchema` instead. */
  export const inboundSchema = CocoAnalysisData$inboundSchema;
  /** @deprecated use `CocoAnalysisData$outboundSchema` instead. */
  export const outboundSchema = CocoAnalysisData$outboundSchema;
  /** @deprecated use `CocoAnalysisData$Outbound` instead. */
  export type Outbound = CocoAnalysisData$Outbound;
}

export function cocoAnalysisDataToJSON(
  cocoAnalysisData: CocoAnalysisData,
): string {
  return JSON.stringify(
    CocoAnalysisData$outboundSchema.parse(cocoAnalysisData),
  );
}

export function cocoAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<CocoAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CocoAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CocoAnalysisData' from JSON`,
  );
}
