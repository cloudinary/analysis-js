/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GoogleLogoDetectionAnalysisData,
  GoogleLogoDetectionAnalysisData$inboundSchema,
  GoogleLogoDetectionAnalysisData$Outbound,
  GoogleLogoDetectionAnalysisData$outboundSchema,
} from "./googlelogodetectionanalysisdata.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";

export type AnalyzeGoogleLogoDetectionResponseData = {
  entity?: string | undefined;
  analysis?: GoogleLogoDetectionAnalysisData | undefined;
};

export type AnalyzeGoogleLogoDetectionResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeGoogleLogoDetectionResponseData | undefined;
};

/** @internal */
export const AnalyzeGoogleLogoDetectionResponseData$inboundSchema: z.ZodType<
  AnalyzeGoogleLogoDetectionResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: GoogleLogoDetectionAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeGoogleLogoDetectionResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: GoogleLogoDetectionAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeGoogleLogoDetectionResponseData$outboundSchema: z.ZodType<
  AnalyzeGoogleLogoDetectionResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeGoogleLogoDetectionResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: GoogleLogoDetectionAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeGoogleLogoDetectionResponseData$ {
  /** @deprecated use `AnalyzeGoogleLogoDetectionResponseData$inboundSchema` instead. */
  export const inboundSchema =
    AnalyzeGoogleLogoDetectionResponseData$inboundSchema;
  /** @deprecated use `AnalyzeGoogleLogoDetectionResponseData$outboundSchema` instead. */
  export const outboundSchema =
    AnalyzeGoogleLogoDetectionResponseData$outboundSchema;
  /** @deprecated use `AnalyzeGoogleLogoDetectionResponseData$Outbound` instead. */
  export type Outbound = AnalyzeGoogleLogoDetectionResponseData$Outbound;
}

export function analyzeGoogleLogoDetectionResponseDataToJSON(
  analyzeGoogleLogoDetectionResponseData:
    AnalyzeGoogleLogoDetectionResponseData,
): string {
  return JSON.stringify(
    AnalyzeGoogleLogoDetectionResponseData$outboundSchema.parse(
      analyzeGoogleLogoDetectionResponseData,
    ),
  );
}

export function analyzeGoogleLogoDetectionResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeGoogleLogoDetectionResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AnalyzeGoogleLogoDetectionResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeGoogleLogoDetectionResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeGoogleLogoDetectionResponse$inboundSchema: z.ZodType<
  AnalyzeGoogleLogoDetectionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeGoogleLogoDetectionResponseData$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeGoogleLogoDetectionResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeGoogleLogoDetectionResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeGoogleLogoDetectionResponse$outboundSchema: z.ZodType<
  AnalyzeGoogleLogoDetectionResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeGoogleLogoDetectionResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeGoogleLogoDetectionResponseData$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeGoogleLogoDetectionResponse$ {
  /** @deprecated use `AnalyzeGoogleLogoDetectionResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeGoogleLogoDetectionResponse$inboundSchema;
  /** @deprecated use `AnalyzeGoogleLogoDetectionResponse$outboundSchema` instead. */
  export const outboundSchema =
    AnalyzeGoogleLogoDetectionResponse$outboundSchema;
  /** @deprecated use `AnalyzeGoogleLogoDetectionResponse$Outbound` instead. */
  export type Outbound = AnalyzeGoogleLogoDetectionResponse$Outbound;
}

export function analyzeGoogleLogoDetectionResponseToJSON(
  analyzeGoogleLogoDetectionResponse: AnalyzeGoogleLogoDetectionResponse,
): string {
  return JSON.stringify(
    AnalyzeGoogleLogoDetectionResponse$outboundSchema.parse(
      analyzeGoogleLogoDetectionResponse,
    ),
  );
}

export function analyzeGoogleLogoDetectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeGoogleLogoDetectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AnalyzeGoogleLogoDetectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeGoogleLogoDetectionResponse' from JSON`,
  );
}
