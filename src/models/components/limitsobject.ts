/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Feature,
  Feature$inboundSchema,
  Feature$outboundSchema,
} from "./feature.js";

export type Limit = {
  type: Feature;
  /**
   * The amount of quota used by the current request
   */
  usedByRequest?: number | null | undefined;
  /**
   * The remaining quota
   */
  remaining?: number | null | undefined;
  /**
   * The total quota limit
   */
  limit?: number | null | undefined;
  /**
   * Time in UTC when the limit will be reset
   */
  resetTime?: Date | null | undefined;
};

export type LimitsObject = {
  items?: Array<Limit> | undefined;
};

/** @internal */
export const Limit$inboundSchema: z.ZodType<Limit, z.ZodTypeDef, unknown> = z
  .object({
    type: Feature$inboundSchema,
    used_by_request: z.nullable(z.number().int()).optional(),
    remaining: z.nullable(z.number().int()).optional(),
    limit: z.nullable(z.number().int()).optional(),
    reset_time: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "used_by_request": "usedByRequest",
      "reset_time": "resetTime",
    });
  });

/** @internal */
export type Limit$Outbound = {
  type: string;
  used_by_request?: number | null | undefined;
  remaining?: number | null | undefined;
  limit?: number | null | undefined;
  reset_time?: string | null | undefined;
};

/** @internal */
export const Limit$outboundSchema: z.ZodType<
  Limit$Outbound,
  z.ZodTypeDef,
  Limit
> = z.object({
  type: Feature$outboundSchema,
  usedByRequest: z.nullable(z.number().int()).optional(),
  remaining: z.nullable(z.number().int()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  resetTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    usedByRequest: "used_by_request",
    resetTime: "reset_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Limit$ {
  /** @deprecated use `Limit$inboundSchema` instead. */
  export const inboundSchema = Limit$inboundSchema;
  /** @deprecated use `Limit$outboundSchema` instead. */
  export const outboundSchema = Limit$outboundSchema;
  /** @deprecated use `Limit$Outbound` instead. */
  export type Outbound = Limit$Outbound;
}

export function limitToJSON(limit: Limit): string {
  return JSON.stringify(Limit$outboundSchema.parse(limit));
}

export function limitFromJSON(
  jsonString: string,
): SafeParseResult<Limit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Limit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Limit' from JSON`,
  );
}

/** @internal */
export const LimitsObject$inboundSchema: z.ZodType<
  LimitsObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.lazy(() => Limit$inboundSchema)).optional(),
});

/** @internal */
export type LimitsObject$Outbound = {
  items?: Array<Limit$Outbound> | undefined;
};

/** @internal */
export const LimitsObject$outboundSchema: z.ZodType<
  LimitsObject$Outbound,
  z.ZodTypeDef,
  LimitsObject
> = z.object({
  items: z.array(z.lazy(() => Limit$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LimitsObject$ {
  /** @deprecated use `LimitsObject$inboundSchema` instead. */
  export const inboundSchema = LimitsObject$inboundSchema;
  /** @deprecated use `LimitsObject$outboundSchema` instead. */
  export const outboundSchema = LimitsObject$outboundSchema;
  /** @deprecated use `LimitsObject$Outbound` instead. */
  export type Outbound = LimitsObject$Outbound;
}

export function limitsObjectToJSON(limitsObject: LimitsObject): string {
  return JSON.stringify(LimitsObject$outboundSchema.parse(limitsObject));
}

export function limitsObjectFromJSON(
  jsonString: string,
): SafeParseResult<LimitsObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LimitsObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LimitsObject' from JSON`,
  );
}
