/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Vertices = {
  x?: number | undefined;
  y?: number | undefined;
};

export type BoundingPoly = {
  vertices?: Array<Vertices> | undefined;
};

export type LogoAnnotations = {
  mid?: string | undefined;
  description: string;
  score: number;
  boundingPoly: BoundingPoly;
};

export type GoogleLogoDetectionAnalysisData = {
  logoAnnotations: Array<LogoAnnotations>;
};

/** @internal */
export const Vertices$inboundSchema: z.ZodType<
  Vertices,
  z.ZodTypeDef,
  unknown
> = z.object({
  x: z.number().int().optional(),
  y: z.number().int().optional(),
});

/** @internal */
export type Vertices$Outbound = {
  x?: number | undefined;
  y?: number | undefined;
};

/** @internal */
export const Vertices$outboundSchema: z.ZodType<
  Vertices$Outbound,
  z.ZodTypeDef,
  Vertices
> = z.object({
  x: z.number().int().optional(),
  y: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Vertices$ {
  /** @deprecated use `Vertices$inboundSchema` instead. */
  export const inboundSchema = Vertices$inboundSchema;
  /** @deprecated use `Vertices$outboundSchema` instead. */
  export const outboundSchema = Vertices$outboundSchema;
  /** @deprecated use `Vertices$Outbound` instead. */
  export type Outbound = Vertices$Outbound;
}

export function verticesToJSON(vertices: Vertices): string {
  return JSON.stringify(Vertices$outboundSchema.parse(vertices));
}

export function verticesFromJSON(
  jsonString: string,
): SafeParseResult<Vertices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Vertices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Vertices' from JSON`,
  );
}

/** @internal */
export const BoundingPoly$inboundSchema: z.ZodType<
  BoundingPoly,
  z.ZodTypeDef,
  unknown
> = z.object({
  vertices: z.array(z.lazy(() => Vertices$inboundSchema)).optional(),
});

/** @internal */
export type BoundingPoly$Outbound = {
  vertices?: Array<Vertices$Outbound> | undefined;
};

/** @internal */
export const BoundingPoly$outboundSchema: z.ZodType<
  BoundingPoly$Outbound,
  z.ZodTypeDef,
  BoundingPoly
> = z.object({
  vertices: z.array(z.lazy(() => Vertices$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BoundingPoly$ {
  /** @deprecated use `BoundingPoly$inboundSchema` instead. */
  export const inboundSchema = BoundingPoly$inboundSchema;
  /** @deprecated use `BoundingPoly$outboundSchema` instead. */
  export const outboundSchema = BoundingPoly$outboundSchema;
  /** @deprecated use `BoundingPoly$Outbound` instead. */
  export type Outbound = BoundingPoly$Outbound;
}

export function boundingPolyToJSON(boundingPoly: BoundingPoly): string {
  return JSON.stringify(BoundingPoly$outboundSchema.parse(boundingPoly));
}

export function boundingPolyFromJSON(
  jsonString: string,
): SafeParseResult<BoundingPoly, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BoundingPoly$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BoundingPoly' from JSON`,
  );
}

/** @internal */
export const LogoAnnotations$inboundSchema: z.ZodType<
  LogoAnnotations,
  z.ZodTypeDef,
  unknown
> = z.object({
  mid: z.string().optional(),
  description: z.string(),
  score: z.number(),
  bounding_poly: z.lazy(() => BoundingPoly$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "bounding_poly": "boundingPoly",
  });
});

/** @internal */
export type LogoAnnotations$Outbound = {
  mid?: string | undefined;
  description: string;
  score: number;
  bounding_poly: BoundingPoly$Outbound;
};

/** @internal */
export const LogoAnnotations$outboundSchema: z.ZodType<
  LogoAnnotations$Outbound,
  z.ZodTypeDef,
  LogoAnnotations
> = z.object({
  mid: z.string().optional(),
  description: z.string(),
  score: z.number(),
  boundingPoly: z.lazy(() => BoundingPoly$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    boundingPoly: "bounding_poly",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogoAnnotations$ {
  /** @deprecated use `LogoAnnotations$inboundSchema` instead. */
  export const inboundSchema = LogoAnnotations$inboundSchema;
  /** @deprecated use `LogoAnnotations$outboundSchema` instead. */
  export const outboundSchema = LogoAnnotations$outboundSchema;
  /** @deprecated use `LogoAnnotations$Outbound` instead. */
  export type Outbound = LogoAnnotations$Outbound;
}

export function logoAnnotationsToJSON(
  logoAnnotations: LogoAnnotations,
): string {
  return JSON.stringify(LogoAnnotations$outboundSchema.parse(logoAnnotations));
}

export function logoAnnotationsFromJSON(
  jsonString: string,
): SafeParseResult<LogoAnnotations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogoAnnotations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogoAnnotations' from JSON`,
  );
}

/** @internal */
export const GoogleLogoDetectionAnalysisData$inboundSchema: z.ZodType<
  GoogleLogoDetectionAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  logo_annotations: z.array(z.lazy(() => LogoAnnotations$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "logo_annotations": "logoAnnotations",
  });
});

/** @internal */
export type GoogleLogoDetectionAnalysisData$Outbound = {
  logo_annotations: Array<LogoAnnotations$Outbound>;
};

/** @internal */
export const GoogleLogoDetectionAnalysisData$outboundSchema: z.ZodType<
  GoogleLogoDetectionAnalysisData$Outbound,
  z.ZodTypeDef,
  GoogleLogoDetectionAnalysisData
> = z.object({
  logoAnnotations: z.array(z.lazy(() => LogoAnnotations$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    logoAnnotations: "logo_annotations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleLogoDetectionAnalysisData$ {
  /** @deprecated use `GoogleLogoDetectionAnalysisData$inboundSchema` instead. */
  export const inboundSchema = GoogleLogoDetectionAnalysisData$inboundSchema;
  /** @deprecated use `GoogleLogoDetectionAnalysisData$outboundSchema` instead. */
  export const outboundSchema = GoogleLogoDetectionAnalysisData$outboundSchema;
  /** @deprecated use `GoogleLogoDetectionAnalysisData$Outbound` instead. */
  export type Outbound = GoogleLogoDetectionAnalysisData$Outbound;
}

export function googleLogoDetectionAnalysisDataToJSON(
  googleLogoDetectionAnalysisData: GoogleLogoDetectionAnalysisData,
): string {
  return JSON.stringify(
    GoogleLogoDetectionAnalysisData$outboundSchema.parse(
      googleLogoDetectionAnalysisData,
    ),
  );
}

export function googleLogoDetectionAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<GoogleLogoDetectionAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GoogleLogoDetectionAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GoogleLogoDetectionAnalysisData' from JSON`,
  );
}
