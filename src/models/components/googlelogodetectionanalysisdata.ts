/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Vertex = {
  x?: number | undefined;
  y?: number | undefined;
};

export type BoundingPoly = {
  vertices?: Array<Vertex> | undefined;
};

export type LogoAnnotation = {
  mid?: string | undefined;
  description: string;
  score: number;
  boundingPoly: BoundingPoly;
};

export type GoogleLogoDetectionAnalysisData = {
  logoAnnotations: Array<LogoAnnotation>;
};

/** @internal */
export const Vertex$inboundSchema: z.ZodType<Vertex, z.ZodTypeDef, unknown> = z
  .object({
    x: z.number().int().optional(),
    y: z.number().int().optional(),
  });

/** @internal */
export type Vertex$Outbound = {
  x?: number | undefined;
  y?: number | undefined;
};

/** @internal */
export const Vertex$outboundSchema: z.ZodType<
  Vertex$Outbound,
  z.ZodTypeDef,
  Vertex
> = z.object({
  x: z.number().int().optional(),
  y: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Vertex$ {
  /** @deprecated use `Vertex$inboundSchema` instead. */
  export const inboundSchema = Vertex$inboundSchema;
  /** @deprecated use `Vertex$outboundSchema` instead. */
  export const outboundSchema = Vertex$outboundSchema;
  /** @deprecated use `Vertex$Outbound` instead. */
  export type Outbound = Vertex$Outbound;
}

export function vertexToJSON(vertex: Vertex): string {
  return JSON.stringify(Vertex$outboundSchema.parse(vertex));
}

export function vertexFromJSON(
  jsonString: string,
): SafeParseResult<Vertex, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Vertex$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Vertex' from JSON`,
  );
}

/** @internal */
export const BoundingPoly$inboundSchema: z.ZodType<
  BoundingPoly,
  z.ZodTypeDef,
  unknown
> = z.object({
  vertices: z.array(z.lazy(() => Vertex$inboundSchema)).optional(),
});

/** @internal */
export type BoundingPoly$Outbound = {
  vertices?: Array<Vertex$Outbound> | undefined;
};

/** @internal */
export const BoundingPoly$outboundSchema: z.ZodType<
  BoundingPoly$Outbound,
  z.ZodTypeDef,
  BoundingPoly
> = z.object({
  vertices: z.array(z.lazy(() => Vertex$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BoundingPoly$ {
  /** @deprecated use `BoundingPoly$inboundSchema` instead. */
  export const inboundSchema = BoundingPoly$inboundSchema;
  /** @deprecated use `BoundingPoly$outboundSchema` instead. */
  export const outboundSchema = BoundingPoly$outboundSchema;
  /** @deprecated use `BoundingPoly$Outbound` instead. */
  export type Outbound = BoundingPoly$Outbound;
}

export function boundingPolyToJSON(boundingPoly: BoundingPoly): string {
  return JSON.stringify(BoundingPoly$outboundSchema.parse(boundingPoly));
}

export function boundingPolyFromJSON(
  jsonString: string,
): SafeParseResult<BoundingPoly, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BoundingPoly$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BoundingPoly' from JSON`,
  );
}

/** @internal */
export const LogoAnnotation$inboundSchema: z.ZodType<
  LogoAnnotation,
  z.ZodTypeDef,
  unknown
> = z.object({
  mid: z.string().optional(),
  description: z.string(),
  score: z.number(),
  bounding_poly: z.lazy(() => BoundingPoly$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "bounding_poly": "boundingPoly",
  });
});

/** @internal */
export type LogoAnnotation$Outbound = {
  mid?: string | undefined;
  description: string;
  score: number;
  bounding_poly: BoundingPoly$Outbound;
};

/** @internal */
export const LogoAnnotation$outboundSchema: z.ZodType<
  LogoAnnotation$Outbound,
  z.ZodTypeDef,
  LogoAnnotation
> = z.object({
  mid: z.string().optional(),
  description: z.string(),
  score: z.number(),
  boundingPoly: z.lazy(() => BoundingPoly$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    boundingPoly: "bounding_poly",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogoAnnotation$ {
  /** @deprecated use `LogoAnnotation$inboundSchema` instead. */
  export const inboundSchema = LogoAnnotation$inboundSchema;
  /** @deprecated use `LogoAnnotation$outboundSchema` instead. */
  export const outboundSchema = LogoAnnotation$outboundSchema;
  /** @deprecated use `LogoAnnotation$Outbound` instead. */
  export type Outbound = LogoAnnotation$Outbound;
}

export function logoAnnotationToJSON(logoAnnotation: LogoAnnotation): string {
  return JSON.stringify(LogoAnnotation$outboundSchema.parse(logoAnnotation));
}

export function logoAnnotationFromJSON(
  jsonString: string,
): SafeParseResult<LogoAnnotation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogoAnnotation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogoAnnotation' from JSON`,
  );
}

/** @internal */
export const GoogleLogoDetectionAnalysisData$inboundSchema: z.ZodType<
  GoogleLogoDetectionAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  logo_annotations: z.array(z.lazy(() => LogoAnnotation$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "logo_annotations": "logoAnnotations",
  });
});

/** @internal */
export type GoogleLogoDetectionAnalysisData$Outbound = {
  logo_annotations: Array<LogoAnnotation$Outbound>;
};

/** @internal */
export const GoogleLogoDetectionAnalysisData$outboundSchema: z.ZodType<
  GoogleLogoDetectionAnalysisData$Outbound,
  z.ZodTypeDef,
  GoogleLogoDetectionAnalysisData
> = z.object({
  logoAnnotations: z.array(z.lazy(() => LogoAnnotation$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    logoAnnotations: "logo_annotations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleLogoDetectionAnalysisData$ {
  /** @deprecated use `GoogleLogoDetectionAnalysisData$inboundSchema` instead. */
  export const inboundSchema = GoogleLogoDetectionAnalysisData$inboundSchema;
  /** @deprecated use `GoogleLogoDetectionAnalysisData$outboundSchema` instead. */
  export const outboundSchema = GoogleLogoDetectionAnalysisData$outboundSchema;
  /** @deprecated use `GoogleLogoDetectionAnalysisData$Outbound` instead. */
  export type Outbound = GoogleLogoDetectionAnalysisData$Outbound;
}

export function googleLogoDetectionAnalysisDataToJSON(
  googleLogoDetectionAnalysisData: GoogleLogoDetectionAnalysisData,
): string {
  return JSON.stringify(
    GoogleLogoDetectionAnalysisData$outboundSchema.parse(
      googleLogoDetectionAnalysisData,
    ),
  );
}

export function googleLogoDetectionAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<GoogleLogoDetectionAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GoogleLogoDetectionAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GoogleLogoDetectionAnalysisData' from JSON`,
  );
}
