/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CaptioningAnalysisDataData = {
  caption: string;
};

export type CaptioningAnalysisData = {
  data: CaptioningAnalysisDataData;
  modelVersion?: number | undefined;
};

/** @internal */
export const CaptioningAnalysisDataData$inboundSchema: z.ZodType<
  CaptioningAnalysisDataData,
  z.ZodTypeDef,
  unknown
> = z.object({
  caption: z.string(),
});

/** @internal */
export type CaptioningAnalysisDataData$Outbound = {
  caption: string;
};

/** @internal */
export const CaptioningAnalysisDataData$outboundSchema: z.ZodType<
  CaptioningAnalysisDataData$Outbound,
  z.ZodTypeDef,
  CaptioningAnalysisDataData
> = z.object({
  caption: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaptioningAnalysisDataData$ {
  /** @deprecated use `CaptioningAnalysisDataData$inboundSchema` instead. */
  export const inboundSchema = CaptioningAnalysisDataData$inboundSchema;
  /** @deprecated use `CaptioningAnalysisDataData$outboundSchema` instead. */
  export const outboundSchema = CaptioningAnalysisDataData$outboundSchema;
  /** @deprecated use `CaptioningAnalysisDataData$Outbound` instead. */
  export type Outbound = CaptioningAnalysisDataData$Outbound;
}

export function captioningAnalysisDataDataToJSON(
  captioningAnalysisDataData: CaptioningAnalysisDataData,
): string {
  return JSON.stringify(
    CaptioningAnalysisDataData$outboundSchema.parse(captioningAnalysisDataData),
  );
}

export function captioningAnalysisDataDataFromJSON(
  jsonString: string,
): SafeParseResult<CaptioningAnalysisDataData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CaptioningAnalysisDataData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CaptioningAnalysisDataData' from JSON`,
  );
}

/** @internal */
export const CaptioningAnalysisData$inboundSchema: z.ZodType<
  CaptioningAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => CaptioningAnalysisDataData$inboundSchema),
  model_version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_version": "modelVersion",
  });
});

/** @internal */
export type CaptioningAnalysisData$Outbound = {
  data: CaptioningAnalysisDataData$Outbound;
  model_version?: number | undefined;
};

/** @internal */
export const CaptioningAnalysisData$outboundSchema: z.ZodType<
  CaptioningAnalysisData$Outbound,
  z.ZodTypeDef,
  CaptioningAnalysisData
> = z.object({
  data: z.lazy(() => CaptioningAnalysisDataData$outboundSchema),
  modelVersion: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    modelVersion: "model_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaptioningAnalysisData$ {
  /** @deprecated use `CaptioningAnalysisData$inboundSchema` instead. */
  export const inboundSchema = CaptioningAnalysisData$inboundSchema;
  /** @deprecated use `CaptioningAnalysisData$outboundSchema` instead. */
  export const outboundSchema = CaptioningAnalysisData$outboundSchema;
  /** @deprecated use `CaptioningAnalysisData$Outbound` instead. */
  export type Outbound = CaptioningAnalysisData$Outbound;
}

export function captioningAnalysisDataToJSON(
  captioningAnalysisData: CaptioningAnalysisData,
): string {
  return JSON.stringify(
    CaptioningAnalysisData$outboundSchema.parse(captioningAnalysisData),
  );
}

export function captioningAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<CaptioningAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CaptioningAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CaptioningAnalysisData' from JSON`,
  );
}
