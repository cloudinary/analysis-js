/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ShopClassifierAnalysisDataTags = {};

export type ShopClassifierAnalysisData = {
  tags: ShopClassifierAnalysisDataTags;
  modelVersion?: number | undefined;
};

/** @internal */
export const ShopClassifierAnalysisDataTags$inboundSchema: z.ZodType<
  ShopClassifierAnalysisDataTags,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ShopClassifierAnalysisDataTags$Outbound = {};

/** @internal */
export const ShopClassifierAnalysisDataTags$outboundSchema: z.ZodType<
  ShopClassifierAnalysisDataTags$Outbound,
  z.ZodTypeDef,
  ShopClassifierAnalysisDataTags
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShopClassifierAnalysisDataTags$ {
  /** @deprecated use `ShopClassifierAnalysisDataTags$inboundSchema` instead. */
  export const inboundSchema = ShopClassifierAnalysisDataTags$inboundSchema;
  /** @deprecated use `ShopClassifierAnalysisDataTags$outboundSchema` instead. */
  export const outboundSchema = ShopClassifierAnalysisDataTags$outboundSchema;
  /** @deprecated use `ShopClassifierAnalysisDataTags$Outbound` instead. */
  export type Outbound = ShopClassifierAnalysisDataTags$Outbound;
}

export function shopClassifierAnalysisDataTagsToJSON(
  shopClassifierAnalysisDataTags: ShopClassifierAnalysisDataTags,
): string {
  return JSON.stringify(
    ShopClassifierAnalysisDataTags$outboundSchema.parse(
      shopClassifierAnalysisDataTags,
    ),
  );
}

export function shopClassifierAnalysisDataTagsFromJSON(
  jsonString: string,
): SafeParseResult<ShopClassifierAnalysisDataTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShopClassifierAnalysisDataTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShopClassifierAnalysisDataTags' from JSON`,
  );
}

/** @internal */
export const ShopClassifierAnalysisData$inboundSchema: z.ZodType<
  ShopClassifierAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  tags: z.lazy(() => ShopClassifierAnalysisDataTags$inboundSchema),
  model_version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_version": "modelVersion",
  });
});

/** @internal */
export type ShopClassifierAnalysisData$Outbound = {
  tags: ShopClassifierAnalysisDataTags$Outbound;
  model_version?: number | undefined;
};

/** @internal */
export const ShopClassifierAnalysisData$outboundSchema: z.ZodType<
  ShopClassifierAnalysisData$Outbound,
  z.ZodTypeDef,
  ShopClassifierAnalysisData
> = z.object({
  tags: z.lazy(() => ShopClassifierAnalysisDataTags$outboundSchema),
  modelVersion: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    modelVersion: "model_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShopClassifierAnalysisData$ {
  /** @deprecated use `ShopClassifierAnalysisData$inboundSchema` instead. */
  export const inboundSchema = ShopClassifierAnalysisData$inboundSchema;
  /** @deprecated use `ShopClassifierAnalysisData$outboundSchema` instead. */
  export const outboundSchema = ShopClassifierAnalysisData$outboundSchema;
  /** @deprecated use `ShopClassifierAnalysisData$Outbound` instead. */
  export type Outbound = ShopClassifierAnalysisData$Outbound;
}

export function shopClassifierAnalysisDataToJSON(
  shopClassifierAnalysisData: ShopClassifierAnalysisData,
): string {
  return JSON.stringify(
    ShopClassifierAnalysisData$outboundSchema.parse(shopClassifierAnalysisData),
  );
}

export function shopClassifierAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<ShopClassifierAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShopClassifierAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShopClassifierAnalysisData' from JSON`,
  );
}
