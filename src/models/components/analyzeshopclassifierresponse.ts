/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";
import {
  ShopClassifierAnalysisData,
  ShopClassifierAnalysisData$inboundSchema,
  ShopClassifierAnalysisData$Outbound,
  ShopClassifierAnalysisData$outboundSchema,
} from "./shopclassifieranalysisdata.js";

export type AnalyzeShopClassifierResponseData = {
  entity?: string | undefined;
  analysis?: ShopClassifierAnalysisData | undefined;
};

export type AnalyzeShopClassifierResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeShopClassifierResponseData | undefined;
};

/** @internal */
export const AnalyzeShopClassifierResponseData$inboundSchema: z.ZodType<
  AnalyzeShopClassifierResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: ShopClassifierAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeShopClassifierResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: ShopClassifierAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeShopClassifierResponseData$outboundSchema: z.ZodType<
  AnalyzeShopClassifierResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeShopClassifierResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: ShopClassifierAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeShopClassifierResponseData$ {
  /** @deprecated use `AnalyzeShopClassifierResponseData$inboundSchema` instead. */
  export const inboundSchema = AnalyzeShopClassifierResponseData$inboundSchema;
  /** @deprecated use `AnalyzeShopClassifierResponseData$outboundSchema` instead. */
  export const outboundSchema =
    AnalyzeShopClassifierResponseData$outboundSchema;
  /** @deprecated use `AnalyzeShopClassifierResponseData$Outbound` instead. */
  export type Outbound = AnalyzeShopClassifierResponseData$Outbound;
}

export function analyzeShopClassifierResponseDataToJSON(
  analyzeShopClassifierResponseData: AnalyzeShopClassifierResponseData,
): string {
  return JSON.stringify(
    AnalyzeShopClassifierResponseData$outboundSchema.parse(
      analyzeShopClassifierResponseData,
    ),
  );
}

export function analyzeShopClassifierResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeShopClassifierResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeShopClassifierResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeShopClassifierResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeShopClassifierResponse$inboundSchema: z.ZodType<
  AnalyzeShopClassifierResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeShopClassifierResponseData$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeShopClassifierResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeShopClassifierResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeShopClassifierResponse$outboundSchema: z.ZodType<
  AnalyzeShopClassifierResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeShopClassifierResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeShopClassifierResponseData$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeShopClassifierResponse$ {
  /** @deprecated use `AnalyzeShopClassifierResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeShopClassifierResponse$inboundSchema;
  /** @deprecated use `AnalyzeShopClassifierResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeShopClassifierResponse$outboundSchema;
  /** @deprecated use `AnalyzeShopClassifierResponse$Outbound` instead. */
  export type Outbound = AnalyzeShopClassifierResponse$Outbound;
}

export function analyzeShopClassifierResponseToJSON(
  analyzeShopClassifierResponse: AnalyzeShopClassifierResponse,
): string {
  return JSON.stringify(
    AnalyzeShopClassifierResponse$outboundSchema.parse(
      analyzeShopClassifierResponse,
    ),
  );
}

export function analyzeShopClassifierResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeShopClassifierResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeShopClassifierResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeShopClassifierResponse' from JSON`,
  );
}
