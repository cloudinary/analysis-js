/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ImageQualityAnalysisData = {
  quality?: string | undefined;
  score?: number | undefined;
  confidence?: number | undefined;
  modelVersion?: number | undefined;
};

/** @internal */
export const ImageQualityAnalysisData$inboundSchema: z.ZodType<
  ImageQualityAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  quality: z.string().optional(),
  score: z.number().optional(),
  confidence: z.number().optional(),
  model_version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_version": "modelVersion",
  });
});

/** @internal */
export type ImageQualityAnalysisData$Outbound = {
  quality?: string | undefined;
  score?: number | undefined;
  confidence?: number | undefined;
  model_version?: number | undefined;
};

/** @internal */
export const ImageQualityAnalysisData$outboundSchema: z.ZodType<
  ImageQualityAnalysisData$Outbound,
  z.ZodTypeDef,
  ImageQualityAnalysisData
> = z.object({
  quality: z.string().optional(),
  score: z.number().optional(),
  confidence: z.number().optional(),
  modelVersion: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    modelVersion: "model_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageQualityAnalysisData$ {
  /** @deprecated use `ImageQualityAnalysisData$inboundSchema` instead. */
  export const inboundSchema = ImageQualityAnalysisData$inboundSchema;
  /** @deprecated use `ImageQualityAnalysisData$outboundSchema` instead. */
  export const outboundSchema = ImageQualityAnalysisData$outboundSchema;
  /** @deprecated use `ImageQualityAnalysisData$Outbound` instead. */
  export type Outbound = ImageQualityAnalysisData$Outbound;
}

export function imageQualityAnalysisDataToJSON(
  imageQualityAnalysisData: ImageQualityAnalysisData,
): string {
  return JSON.stringify(
    ImageQualityAnalysisData$outboundSchema.parse(imageQualityAnalysisData),
  );
}

export function imageQualityAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<ImageQualityAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageQualityAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageQualityAnalysisData' from JSON`,
  );
}
