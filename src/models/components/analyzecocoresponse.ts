/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CocoAnalysisData,
  CocoAnalysisData$inboundSchema,
  CocoAnalysisData$Outbound,
  CocoAnalysisData$outboundSchema,
} from "./cocoanalysisdata.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";

export type AnalyzeCocoResponseData = {
  entity?: string | undefined;
  analysis?: CocoAnalysisData | undefined;
};

export type AnalyzeCocoResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeCocoResponseData | undefined;
};

/** @internal */
export const AnalyzeCocoResponseData$inboundSchema: z.ZodType<
  AnalyzeCocoResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: CocoAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeCocoResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: CocoAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeCocoResponseData$outboundSchema: z.ZodType<
  AnalyzeCocoResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeCocoResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: CocoAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeCocoResponseData$ {
  /** @deprecated use `AnalyzeCocoResponseData$inboundSchema` instead. */
  export const inboundSchema = AnalyzeCocoResponseData$inboundSchema;
  /** @deprecated use `AnalyzeCocoResponseData$outboundSchema` instead. */
  export const outboundSchema = AnalyzeCocoResponseData$outboundSchema;
  /** @deprecated use `AnalyzeCocoResponseData$Outbound` instead. */
  export type Outbound = AnalyzeCocoResponseData$Outbound;
}

export function analyzeCocoResponseDataToJSON(
  analyzeCocoResponseData: AnalyzeCocoResponseData,
): string {
  return JSON.stringify(
    AnalyzeCocoResponseData$outboundSchema.parse(analyzeCocoResponseData),
  );
}

export function analyzeCocoResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeCocoResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeCocoResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeCocoResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeCocoResponse$inboundSchema: z.ZodType<
  AnalyzeCocoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeCocoResponseData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeCocoResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeCocoResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeCocoResponse$outboundSchema: z.ZodType<
  AnalyzeCocoResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeCocoResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeCocoResponseData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeCocoResponse$ {
  /** @deprecated use `AnalyzeCocoResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeCocoResponse$inboundSchema;
  /** @deprecated use `AnalyzeCocoResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeCocoResponse$outboundSchema;
  /** @deprecated use `AnalyzeCocoResponse$Outbound` instead. */
  export type Outbound = AnalyzeCocoResponse$Outbound;
}

export function analyzeCocoResponseToJSON(
  analyzeCocoResponse: AnalyzeCocoResponse,
): string {
  return JSON.stringify(
    AnalyzeCocoResponse$outboundSchema.parse(analyzeCocoResponse),
  );
}

export function analyzeCocoResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeCocoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeCocoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeCocoResponse' from JSON`,
  );
}
