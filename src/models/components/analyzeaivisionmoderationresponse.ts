/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AIVisionModerationAnalysisData,
  AIVisionModerationAnalysisData$inboundSchema,
  AIVisionModerationAnalysisData$Outbound,
  AIVisionModerationAnalysisData$outboundSchema,
} from "./aivisionmoderationanalysisdata.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";

export type AnalyzeAIVisionModerationResponseData = {
  entity?: string | undefined;
  analysis?: AIVisionModerationAnalysisData | undefined;
};

export type AnalyzeAIVisionModerationResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeAIVisionModerationResponseData | undefined;
};

/** @internal */
export const AnalyzeAIVisionModerationResponseData$inboundSchema: z.ZodType<
  AnalyzeAIVisionModerationResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: AIVisionModerationAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeAIVisionModerationResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: AIVisionModerationAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeAIVisionModerationResponseData$outboundSchema: z.ZodType<
  AnalyzeAIVisionModerationResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeAIVisionModerationResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: AIVisionModerationAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeAIVisionModerationResponseData$ {
  /** @deprecated use `AnalyzeAIVisionModerationResponseData$inboundSchema` instead. */
  export const inboundSchema =
    AnalyzeAIVisionModerationResponseData$inboundSchema;
  /** @deprecated use `AnalyzeAIVisionModerationResponseData$outboundSchema` instead. */
  export const outboundSchema =
    AnalyzeAIVisionModerationResponseData$outboundSchema;
  /** @deprecated use `AnalyzeAIVisionModerationResponseData$Outbound` instead. */
  export type Outbound = AnalyzeAIVisionModerationResponseData$Outbound;
}

export function analyzeAIVisionModerationResponseDataToJSON(
  analyzeAIVisionModerationResponseData: AnalyzeAIVisionModerationResponseData,
): string {
  return JSON.stringify(
    AnalyzeAIVisionModerationResponseData$outboundSchema.parse(
      analyzeAIVisionModerationResponseData,
    ),
  );
}

export function analyzeAIVisionModerationResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeAIVisionModerationResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AnalyzeAIVisionModerationResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeAIVisionModerationResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeAIVisionModerationResponse$inboundSchema: z.ZodType<
  AnalyzeAIVisionModerationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeAIVisionModerationResponseData$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeAIVisionModerationResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeAIVisionModerationResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeAIVisionModerationResponse$outboundSchema: z.ZodType<
  AnalyzeAIVisionModerationResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeAIVisionModerationResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeAIVisionModerationResponseData$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeAIVisionModerationResponse$ {
  /** @deprecated use `AnalyzeAIVisionModerationResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeAIVisionModerationResponse$inboundSchema;
  /** @deprecated use `AnalyzeAIVisionModerationResponse$outboundSchema` instead. */
  export const outboundSchema =
    AnalyzeAIVisionModerationResponse$outboundSchema;
  /** @deprecated use `AnalyzeAIVisionModerationResponse$Outbound` instead. */
  export type Outbound = AnalyzeAIVisionModerationResponse$Outbound;
}

export function analyzeAIVisionModerationResponseToJSON(
  analyzeAIVisionModerationResponse: AnalyzeAIVisionModerationResponse,
): string {
  return JSON.stringify(
    AnalyzeAIVisionModerationResponse$outboundSchema.parse(
      analyzeAIVisionModerationResponse,
    ),
  );
}

export function analyzeAIVisionModerationResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeAIVisionModerationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeAIVisionModerationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeAIVisionModerationResponse' from JSON`,
  );
}
