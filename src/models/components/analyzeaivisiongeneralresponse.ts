/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AIVisionGeneralAnalysisData,
  AIVisionGeneralAnalysisData$inboundSchema,
  AIVisionGeneralAnalysisData$Outbound,
  AIVisionGeneralAnalysisData$outboundSchema,
} from "./aivisiongeneralanalysisdata.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";

export type AnalyzeAIVisionGeneralResponseData = {
  entity?: string | undefined;
  analysis?: AIVisionGeneralAnalysisData | undefined;
};

export type AnalyzeAIVisionGeneralResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeAIVisionGeneralResponseData | undefined;
};

/** @internal */
export const AnalyzeAIVisionGeneralResponseData$inboundSchema: z.ZodType<
  AnalyzeAIVisionGeneralResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: AIVisionGeneralAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeAIVisionGeneralResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: AIVisionGeneralAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeAIVisionGeneralResponseData$outboundSchema: z.ZodType<
  AnalyzeAIVisionGeneralResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeAIVisionGeneralResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: AIVisionGeneralAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeAIVisionGeneralResponseData$ {
  /** @deprecated use `AnalyzeAIVisionGeneralResponseData$inboundSchema` instead. */
  export const inboundSchema = AnalyzeAIVisionGeneralResponseData$inboundSchema;
  /** @deprecated use `AnalyzeAIVisionGeneralResponseData$outboundSchema` instead. */
  export const outboundSchema =
    AnalyzeAIVisionGeneralResponseData$outboundSchema;
  /** @deprecated use `AnalyzeAIVisionGeneralResponseData$Outbound` instead. */
  export type Outbound = AnalyzeAIVisionGeneralResponseData$Outbound;
}

export function analyzeAIVisionGeneralResponseDataToJSON(
  analyzeAIVisionGeneralResponseData: AnalyzeAIVisionGeneralResponseData,
): string {
  return JSON.stringify(
    AnalyzeAIVisionGeneralResponseData$outboundSchema.parse(
      analyzeAIVisionGeneralResponseData,
    ),
  );
}

export function analyzeAIVisionGeneralResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeAIVisionGeneralResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AnalyzeAIVisionGeneralResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeAIVisionGeneralResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeAIVisionGeneralResponse$inboundSchema: z.ZodType<
  AnalyzeAIVisionGeneralResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeAIVisionGeneralResponseData$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeAIVisionGeneralResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeAIVisionGeneralResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeAIVisionGeneralResponse$outboundSchema: z.ZodType<
  AnalyzeAIVisionGeneralResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeAIVisionGeneralResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeAIVisionGeneralResponseData$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeAIVisionGeneralResponse$ {
  /** @deprecated use `AnalyzeAIVisionGeneralResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeAIVisionGeneralResponse$inboundSchema;
  /** @deprecated use `AnalyzeAIVisionGeneralResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeAIVisionGeneralResponse$outboundSchema;
  /** @deprecated use `AnalyzeAIVisionGeneralResponse$Outbound` instead. */
  export type Outbound = AnalyzeAIVisionGeneralResponse$Outbound;
}

export function analyzeAIVisionGeneralResponseToJSON(
  analyzeAIVisionGeneralResponse: AnalyzeAIVisionGeneralResponse,
): string {
  return JSON.stringify(
    AnalyzeAIVisionGeneralResponse$outboundSchema.parse(
      analyzeAIVisionGeneralResponse,
    ),
  );
}

export function analyzeAIVisionGeneralResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeAIVisionGeneralResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeAIVisionGeneralResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeAIVisionGeneralResponse' from JSON`,
  );
}
