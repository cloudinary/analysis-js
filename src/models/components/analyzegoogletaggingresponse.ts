/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GoogleTaggingAnalysisData,
  GoogleTaggingAnalysisData$inboundSchema,
  GoogleTaggingAnalysisData$Outbound,
  GoogleTaggingAnalysisData$outboundSchema,
} from "./googletagginganalysisdata.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";

export type AnalyzeGoogleTaggingResponseData = {
  entity?: string | undefined;
  analysis?: GoogleTaggingAnalysisData | undefined;
};

export type AnalyzeGoogleTaggingResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeGoogleTaggingResponseData | undefined;
};

/** @internal */
export const AnalyzeGoogleTaggingResponseData$inboundSchema: z.ZodType<
  AnalyzeGoogleTaggingResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: GoogleTaggingAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeGoogleTaggingResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: GoogleTaggingAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeGoogleTaggingResponseData$outboundSchema: z.ZodType<
  AnalyzeGoogleTaggingResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeGoogleTaggingResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: GoogleTaggingAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeGoogleTaggingResponseData$ {
  /** @deprecated use `AnalyzeGoogleTaggingResponseData$inboundSchema` instead. */
  export const inboundSchema = AnalyzeGoogleTaggingResponseData$inboundSchema;
  /** @deprecated use `AnalyzeGoogleTaggingResponseData$outboundSchema` instead. */
  export const outboundSchema = AnalyzeGoogleTaggingResponseData$outboundSchema;
  /** @deprecated use `AnalyzeGoogleTaggingResponseData$Outbound` instead. */
  export type Outbound = AnalyzeGoogleTaggingResponseData$Outbound;
}

export function analyzeGoogleTaggingResponseDataToJSON(
  analyzeGoogleTaggingResponseData: AnalyzeGoogleTaggingResponseData,
): string {
  return JSON.stringify(
    AnalyzeGoogleTaggingResponseData$outboundSchema.parse(
      analyzeGoogleTaggingResponseData,
    ),
  );
}

export function analyzeGoogleTaggingResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeGoogleTaggingResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeGoogleTaggingResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeGoogleTaggingResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeGoogleTaggingResponse$inboundSchema: z.ZodType<
  AnalyzeGoogleTaggingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeGoogleTaggingResponseData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeGoogleTaggingResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeGoogleTaggingResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeGoogleTaggingResponse$outboundSchema: z.ZodType<
  AnalyzeGoogleTaggingResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeGoogleTaggingResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeGoogleTaggingResponseData$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeGoogleTaggingResponse$ {
  /** @deprecated use `AnalyzeGoogleTaggingResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeGoogleTaggingResponse$inboundSchema;
  /** @deprecated use `AnalyzeGoogleTaggingResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeGoogleTaggingResponse$outboundSchema;
  /** @deprecated use `AnalyzeGoogleTaggingResponse$Outbound` instead. */
  export type Outbound = AnalyzeGoogleTaggingResponse$Outbound;
}

export function analyzeGoogleTaggingResponseToJSON(
  analyzeGoogleTaggingResponse: AnalyzeGoogleTaggingResponse,
): string {
  return JSON.stringify(
    AnalyzeGoogleTaggingResponse$outboundSchema.parse(
      analyzeGoogleTaggingResponse,
    ),
  );
}

export function analyzeGoogleTaggingResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeGoogleTaggingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeGoogleTaggingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeGoogleTaggingResponse' from JSON`,
  );
}
