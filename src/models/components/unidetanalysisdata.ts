/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UnidetAnalysisDataTags = {};

export type UnidetAnalysisData = {
  tags: UnidetAnalysisDataTags;
  modelVersion?: number | undefined;
};

/** @internal */
export const UnidetAnalysisDataTags$inboundSchema: z.ZodType<
  UnidetAnalysisDataTags,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UnidetAnalysisDataTags$Outbound = {};

/** @internal */
export const UnidetAnalysisDataTags$outboundSchema: z.ZodType<
  UnidetAnalysisDataTags$Outbound,
  z.ZodTypeDef,
  UnidetAnalysisDataTags
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnidetAnalysisDataTags$ {
  /** @deprecated use `UnidetAnalysisDataTags$inboundSchema` instead. */
  export const inboundSchema = UnidetAnalysisDataTags$inboundSchema;
  /** @deprecated use `UnidetAnalysisDataTags$outboundSchema` instead. */
  export const outboundSchema = UnidetAnalysisDataTags$outboundSchema;
  /** @deprecated use `UnidetAnalysisDataTags$Outbound` instead. */
  export type Outbound = UnidetAnalysisDataTags$Outbound;
}

export function unidetAnalysisDataTagsToJSON(
  unidetAnalysisDataTags: UnidetAnalysisDataTags,
): string {
  return JSON.stringify(
    UnidetAnalysisDataTags$outboundSchema.parse(unidetAnalysisDataTags),
  );
}

export function unidetAnalysisDataTagsFromJSON(
  jsonString: string,
): SafeParseResult<UnidetAnalysisDataTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnidetAnalysisDataTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnidetAnalysisDataTags' from JSON`,
  );
}

/** @internal */
export const UnidetAnalysisData$inboundSchema: z.ZodType<
  UnidetAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  tags: z.lazy(() => UnidetAnalysisDataTags$inboundSchema),
  model_version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_version": "modelVersion",
  });
});

/** @internal */
export type UnidetAnalysisData$Outbound = {
  tags: UnidetAnalysisDataTags$Outbound;
  model_version?: number | undefined;
};

/** @internal */
export const UnidetAnalysisData$outboundSchema: z.ZodType<
  UnidetAnalysisData$Outbound,
  z.ZodTypeDef,
  UnidetAnalysisData
> = z.object({
  tags: z.lazy(() => UnidetAnalysisDataTags$outboundSchema),
  modelVersion: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    modelVersion: "model_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnidetAnalysisData$ {
  /** @deprecated use `UnidetAnalysisData$inboundSchema` instead. */
  export const inboundSchema = UnidetAnalysisData$inboundSchema;
  /** @deprecated use `UnidetAnalysisData$outboundSchema` instead. */
  export const outboundSchema = UnidetAnalysisData$outboundSchema;
  /** @deprecated use `UnidetAnalysisData$Outbound` instead. */
  export type Outbound = UnidetAnalysisData$Outbound;
}

export function unidetAnalysisDataToJSON(
  unidetAnalysisData: UnidetAnalysisData,
): string {
  return JSON.stringify(
    UnidetAnalysisData$outboundSchema.parse(unidetAnalysisData),
  );
}

export function unidetAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<UnidetAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnidetAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnidetAnalysisData' from JSON`,
  );
}
