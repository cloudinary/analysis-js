/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Source,
  Source$inboundSchema,
  Source$Outbound,
  Source$outboundSchema,
} from "./source.js";

export type BaseAnalyzeRequest = {
  source: Source;
  /**
   * Whether to perform the analysis asynchronously.
   *
   * @remarks
   * If true, the response is returned immediately and analysis is done in the background.
   * Once complete, a webhook notification will be sent to the specified URL and/or to the URLs defined in the Webhook Notifications settings of your Cloudinary Console.
   */
  async?: boolean | undefined;
  /**
   * The webhook URL to notify when the analysis is complete. Only relevant when async is set to true.
   */
  notificationUrl?: string | undefined;
};

/** @internal */
export const BaseAnalyzeRequest$inboundSchema: z.ZodType<
  BaseAnalyzeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: Source$inboundSchema,
  async: z.boolean().optional(),
  notification_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "notification_url": "notificationUrl",
  });
});

/** @internal */
export type BaseAnalyzeRequest$Outbound = {
  source: Source$Outbound;
  async?: boolean | undefined;
  notification_url?: string | undefined;
};

/** @internal */
export const BaseAnalyzeRequest$outboundSchema: z.ZodType<
  BaseAnalyzeRequest$Outbound,
  z.ZodTypeDef,
  BaseAnalyzeRequest
> = z.object({
  source: Source$outboundSchema,
  async: z.boolean().optional(),
  notificationUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    notificationUrl: "notification_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BaseAnalyzeRequest$ {
  /** @deprecated use `BaseAnalyzeRequest$inboundSchema` instead. */
  export const inboundSchema = BaseAnalyzeRequest$inboundSchema;
  /** @deprecated use `BaseAnalyzeRequest$outboundSchema` instead. */
  export const outboundSchema = BaseAnalyzeRequest$outboundSchema;
  /** @deprecated use `BaseAnalyzeRequest$Outbound` instead. */
  export type Outbound = BaseAnalyzeRequest$Outbound;
}

export function baseAnalyzeRequestToJSON(
  baseAnalyzeRequest: BaseAnalyzeRequest,
): string {
  return JSON.stringify(
    BaseAnalyzeRequest$outboundSchema.parse(baseAnalyzeRequest),
  );
}

export function baseAnalyzeRequestFromJSON(
  jsonString: string,
): SafeParseResult<BaseAnalyzeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BaseAnalyzeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BaseAnalyzeRequest' from JSON`,
  );
}
