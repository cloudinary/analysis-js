/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CaptioningAnalysisData,
  CaptioningAnalysisData$inboundSchema,
  CaptioningAnalysisData$Outbound,
  CaptioningAnalysisData$outboundSchema,
} from "./captioninganalysisdata.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";

export type AnalyzeCaptioningResponseData = {
  entity?: string | undefined;
  analysis?: CaptioningAnalysisData | undefined;
};

export type AnalyzeCaptioningResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeCaptioningResponseData | undefined;
};

/** @internal */
export const AnalyzeCaptioningResponseData$inboundSchema: z.ZodType<
  AnalyzeCaptioningResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: CaptioningAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeCaptioningResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: CaptioningAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeCaptioningResponseData$outboundSchema: z.ZodType<
  AnalyzeCaptioningResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeCaptioningResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: CaptioningAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeCaptioningResponseData$ {
  /** @deprecated use `AnalyzeCaptioningResponseData$inboundSchema` instead. */
  export const inboundSchema = AnalyzeCaptioningResponseData$inboundSchema;
  /** @deprecated use `AnalyzeCaptioningResponseData$outboundSchema` instead. */
  export const outboundSchema = AnalyzeCaptioningResponseData$outboundSchema;
  /** @deprecated use `AnalyzeCaptioningResponseData$Outbound` instead. */
  export type Outbound = AnalyzeCaptioningResponseData$Outbound;
}

export function analyzeCaptioningResponseDataToJSON(
  analyzeCaptioningResponseData: AnalyzeCaptioningResponseData,
): string {
  return JSON.stringify(
    AnalyzeCaptioningResponseData$outboundSchema.parse(
      analyzeCaptioningResponseData,
    ),
  );
}

export function analyzeCaptioningResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeCaptioningResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeCaptioningResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeCaptioningResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeCaptioningResponse$inboundSchema: z.ZodType<
  AnalyzeCaptioningResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeCaptioningResponseData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeCaptioningResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeCaptioningResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeCaptioningResponse$outboundSchema: z.ZodType<
  AnalyzeCaptioningResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeCaptioningResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeCaptioningResponseData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeCaptioningResponse$ {
  /** @deprecated use `AnalyzeCaptioningResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeCaptioningResponse$inboundSchema;
  /** @deprecated use `AnalyzeCaptioningResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeCaptioningResponse$outboundSchema;
  /** @deprecated use `AnalyzeCaptioningResponse$Outbound` instead. */
  export type Outbound = AnalyzeCaptioningResponse$Outbound;
}

export function analyzeCaptioningResponseToJSON(
  analyzeCaptioningResponse: AnalyzeCaptioningResponse,
): string {
  return JSON.stringify(
    AnalyzeCaptioningResponse$outboundSchema.parse(analyzeCaptioningResponse),
  );
}

export function analyzeCaptioningResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeCaptioningResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeCaptioningResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeCaptioningResponse' from JSON`,
  );
}
