/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";
import {
  WatermarkDetectionAnalysisData,
  WatermarkDetectionAnalysisData$inboundSchema,
  WatermarkDetectionAnalysisData$Outbound,
  WatermarkDetectionAnalysisData$outboundSchema,
} from "./watermarkdetectionanalysisdata.js";

export type AnalyzeWatermarkDetectionResponseData = {
  entity?: string | undefined;
  analysis?: WatermarkDetectionAnalysisData | undefined;
};

export type AnalyzeWatermarkDetectionResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeWatermarkDetectionResponseData | undefined;
};

/** @internal */
export const AnalyzeWatermarkDetectionResponseData$inboundSchema: z.ZodType<
  AnalyzeWatermarkDetectionResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: WatermarkDetectionAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeWatermarkDetectionResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: WatermarkDetectionAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeWatermarkDetectionResponseData$outboundSchema: z.ZodType<
  AnalyzeWatermarkDetectionResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeWatermarkDetectionResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: WatermarkDetectionAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeWatermarkDetectionResponseData$ {
  /** @deprecated use `AnalyzeWatermarkDetectionResponseData$inboundSchema` instead. */
  export const inboundSchema =
    AnalyzeWatermarkDetectionResponseData$inboundSchema;
  /** @deprecated use `AnalyzeWatermarkDetectionResponseData$outboundSchema` instead. */
  export const outboundSchema =
    AnalyzeWatermarkDetectionResponseData$outboundSchema;
  /** @deprecated use `AnalyzeWatermarkDetectionResponseData$Outbound` instead. */
  export type Outbound = AnalyzeWatermarkDetectionResponseData$Outbound;
}

export function analyzeWatermarkDetectionResponseDataToJSON(
  analyzeWatermarkDetectionResponseData: AnalyzeWatermarkDetectionResponseData,
): string {
  return JSON.stringify(
    AnalyzeWatermarkDetectionResponseData$outboundSchema.parse(
      analyzeWatermarkDetectionResponseData,
    ),
  );
}

export function analyzeWatermarkDetectionResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeWatermarkDetectionResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AnalyzeWatermarkDetectionResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeWatermarkDetectionResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeWatermarkDetectionResponse$inboundSchema: z.ZodType<
  AnalyzeWatermarkDetectionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeWatermarkDetectionResponseData$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeWatermarkDetectionResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeWatermarkDetectionResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeWatermarkDetectionResponse$outboundSchema: z.ZodType<
  AnalyzeWatermarkDetectionResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeWatermarkDetectionResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeWatermarkDetectionResponseData$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeWatermarkDetectionResponse$ {
  /** @deprecated use `AnalyzeWatermarkDetectionResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeWatermarkDetectionResponse$inboundSchema;
  /** @deprecated use `AnalyzeWatermarkDetectionResponse$outboundSchema` instead. */
  export const outboundSchema =
    AnalyzeWatermarkDetectionResponse$outboundSchema;
  /** @deprecated use `AnalyzeWatermarkDetectionResponse$Outbound` instead. */
  export type Outbound = AnalyzeWatermarkDetectionResponse$Outbound;
}

export function analyzeWatermarkDetectionResponseToJSON(
  analyzeWatermarkDetectionResponse: AnalyzeWatermarkDetectionResponse,
): string {
  return JSON.stringify(
    AnalyzeWatermarkDetectionResponse$outboundSchema.parse(
      analyzeWatermarkDetectionResponse,
    ),
  );
}

export function analyzeWatermarkDetectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeWatermarkDetectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeWatermarkDetectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeWatermarkDetectionResponse' from JSON`,
  );
}
