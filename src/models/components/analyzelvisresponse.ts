/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";
import {
  LvisAnalysisData,
  LvisAnalysisData$inboundSchema,
  LvisAnalysisData$Outbound,
  LvisAnalysisData$outboundSchema,
} from "./lvisanalysisdata.js";

export type AnalyzeLvisResponseData = {
  entity?: string | undefined;
  analysis?: LvisAnalysisData | undefined;
};

export type AnalyzeLvisResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeLvisResponseData | undefined;
};

/** @internal */
export const AnalyzeLvisResponseData$inboundSchema: z.ZodType<
  AnalyzeLvisResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: LvisAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeLvisResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: LvisAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeLvisResponseData$outboundSchema: z.ZodType<
  AnalyzeLvisResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeLvisResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: LvisAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeLvisResponseData$ {
  /** @deprecated use `AnalyzeLvisResponseData$inboundSchema` instead. */
  export const inboundSchema = AnalyzeLvisResponseData$inboundSchema;
  /** @deprecated use `AnalyzeLvisResponseData$outboundSchema` instead. */
  export const outboundSchema = AnalyzeLvisResponseData$outboundSchema;
  /** @deprecated use `AnalyzeLvisResponseData$Outbound` instead. */
  export type Outbound = AnalyzeLvisResponseData$Outbound;
}

export function analyzeLvisResponseDataToJSON(
  analyzeLvisResponseData: AnalyzeLvisResponseData,
): string {
  return JSON.stringify(
    AnalyzeLvisResponseData$outboundSchema.parse(analyzeLvisResponseData),
  );
}

export function analyzeLvisResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeLvisResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeLvisResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeLvisResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeLvisResponse$inboundSchema: z.ZodType<
  AnalyzeLvisResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeLvisResponseData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeLvisResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeLvisResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeLvisResponse$outboundSchema: z.ZodType<
  AnalyzeLvisResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeLvisResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeLvisResponseData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeLvisResponse$ {
  /** @deprecated use `AnalyzeLvisResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeLvisResponse$inboundSchema;
  /** @deprecated use `AnalyzeLvisResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeLvisResponse$outboundSchema;
  /** @deprecated use `AnalyzeLvisResponse$Outbound` instead. */
  export type Outbound = AnalyzeLvisResponse$Outbound;
}

export function analyzeLvisResponseToJSON(
  analyzeLvisResponse: AnalyzeLvisResponse,
): string {
  return JSON.stringify(
    AnalyzeLvisResponse$outboundSchema.parse(analyzeLvisResponse),
  );
}

export function analyzeLvisResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeLvisResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeLvisResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeLvisResponse' from JSON`,
  );
}
