/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CldTextAnalysisDataTags = {};

export type CldTextAnalysisData = {
  tags: CldTextAnalysisDataTags;
  modelVersion?: number | undefined;
};

/** @internal */
export const CldTextAnalysisDataTags$inboundSchema: z.ZodType<
  CldTextAnalysisDataTags,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CldTextAnalysisDataTags$Outbound = {};

/** @internal */
export const CldTextAnalysisDataTags$outboundSchema: z.ZodType<
  CldTextAnalysisDataTags$Outbound,
  z.ZodTypeDef,
  CldTextAnalysisDataTags
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CldTextAnalysisDataTags$ {
  /** @deprecated use `CldTextAnalysisDataTags$inboundSchema` instead. */
  export const inboundSchema = CldTextAnalysisDataTags$inboundSchema;
  /** @deprecated use `CldTextAnalysisDataTags$outboundSchema` instead. */
  export const outboundSchema = CldTextAnalysisDataTags$outboundSchema;
  /** @deprecated use `CldTextAnalysisDataTags$Outbound` instead. */
  export type Outbound = CldTextAnalysisDataTags$Outbound;
}

export function cldTextAnalysisDataTagsToJSON(
  cldTextAnalysisDataTags: CldTextAnalysisDataTags,
): string {
  return JSON.stringify(
    CldTextAnalysisDataTags$outboundSchema.parse(cldTextAnalysisDataTags),
  );
}

export function cldTextAnalysisDataTagsFromJSON(
  jsonString: string,
): SafeParseResult<CldTextAnalysisDataTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CldTextAnalysisDataTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CldTextAnalysisDataTags' from JSON`,
  );
}

/** @internal */
export const CldTextAnalysisData$inboundSchema: z.ZodType<
  CldTextAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  tags: z.lazy(() => CldTextAnalysisDataTags$inboundSchema),
  model_version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_version": "modelVersion",
  });
});

/** @internal */
export type CldTextAnalysisData$Outbound = {
  tags: CldTextAnalysisDataTags$Outbound;
  model_version?: number | undefined;
};

/** @internal */
export const CldTextAnalysisData$outboundSchema: z.ZodType<
  CldTextAnalysisData$Outbound,
  z.ZodTypeDef,
  CldTextAnalysisData
> = z.object({
  tags: z.lazy(() => CldTextAnalysisDataTags$outboundSchema),
  modelVersion: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    modelVersion: "model_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CldTextAnalysisData$ {
  /** @deprecated use `CldTextAnalysisData$inboundSchema` instead. */
  export const inboundSchema = CldTextAnalysisData$inboundSchema;
  /** @deprecated use `CldTextAnalysisData$outboundSchema` instead. */
  export const outboundSchema = CldTextAnalysisData$outboundSchema;
  /** @deprecated use `CldTextAnalysisData$Outbound` instead. */
  export type Outbound = CldTextAnalysisData$Outbound;
}

export function cldTextAnalysisDataToJSON(
  cldTextAnalysisData: CldTextAnalysisData,
): string {
  return JSON.stringify(
    CldTextAnalysisData$outboundSchema.parse(cldTextAnalysisData),
  );
}

export function cldTextAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<CldTextAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CldTextAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CldTextAnalysisData' from JSON`,
  );
}
