/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Source,
  Source$inboundSchema,
  Source$Outbound,
  Source$outboundSchema,
} from "./source.js";

export type TagDefinitions = {
  /**
   * The name of the tag to apply. This can be any string and does not affect the decision process
   */
  name: string;
  /**
   * A description to be used by the AI to determine whether the tag should be applied
   */
  description: string;
};

export type AnalyzeAIVisionTaggingRequest = {
  source: Source;
  /**
   * Whether to perform the analysis asynchronously.
   *
   * @remarks
   * If true, the response is returned immediately and analysis is done in the background.
   * Once complete, a webhook notification will be sent to the specified URL and/or to the URLs defined in the Webhook Notifications settings of your Cloudinary Console.
   */
  async?: boolean | undefined;
  /**
   * The webhook URL to notify when the analysis is complete. Only relevant when async is set to true.
   */
  notificationUrl?: string | undefined;
  tagDefinitions: Array<TagDefinitions>;
};

/** @internal */
export const TagDefinitions$inboundSchema: z.ZodType<
  TagDefinitions,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
});

/** @internal */
export type TagDefinitions$Outbound = {
  name: string;
  description: string;
};

/** @internal */
export const TagDefinitions$outboundSchema: z.ZodType<
  TagDefinitions$Outbound,
  z.ZodTypeDef,
  TagDefinitions
> = z.object({
  name: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagDefinitions$ {
  /** @deprecated use `TagDefinitions$inboundSchema` instead. */
  export const inboundSchema = TagDefinitions$inboundSchema;
  /** @deprecated use `TagDefinitions$outboundSchema` instead. */
  export const outboundSchema = TagDefinitions$outboundSchema;
  /** @deprecated use `TagDefinitions$Outbound` instead. */
  export type Outbound = TagDefinitions$Outbound;
}

export function tagDefinitionsToJSON(tagDefinitions: TagDefinitions): string {
  return JSON.stringify(TagDefinitions$outboundSchema.parse(tagDefinitions));
}

export function tagDefinitionsFromJSON(
  jsonString: string,
): SafeParseResult<TagDefinitions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TagDefinitions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TagDefinitions' from JSON`,
  );
}

/** @internal */
export const AnalyzeAIVisionTaggingRequest$inboundSchema: z.ZodType<
  AnalyzeAIVisionTaggingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: Source$inboundSchema,
  async: z.boolean().optional(),
  notification_url: z.string().optional(),
  tag_definitions: z.array(z.lazy(() => TagDefinitions$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "notification_url": "notificationUrl",
    "tag_definitions": "tagDefinitions",
  });
});

/** @internal */
export type AnalyzeAIVisionTaggingRequest$Outbound = {
  source: Source$Outbound;
  async?: boolean | undefined;
  notification_url?: string | undefined;
  tag_definitions: Array<TagDefinitions$Outbound>;
};

/** @internal */
export const AnalyzeAIVisionTaggingRequest$outboundSchema: z.ZodType<
  AnalyzeAIVisionTaggingRequest$Outbound,
  z.ZodTypeDef,
  AnalyzeAIVisionTaggingRequest
> = z.object({
  source: Source$outboundSchema,
  async: z.boolean().optional(),
  notificationUrl: z.string().optional(),
  tagDefinitions: z.array(z.lazy(() => TagDefinitions$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    notificationUrl: "notification_url",
    tagDefinitions: "tag_definitions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeAIVisionTaggingRequest$ {
  /** @deprecated use `AnalyzeAIVisionTaggingRequest$inboundSchema` instead. */
  export const inboundSchema = AnalyzeAIVisionTaggingRequest$inboundSchema;
  /** @deprecated use `AnalyzeAIVisionTaggingRequest$outboundSchema` instead. */
  export const outboundSchema = AnalyzeAIVisionTaggingRequest$outboundSchema;
  /** @deprecated use `AnalyzeAIVisionTaggingRequest$Outbound` instead. */
  export type Outbound = AnalyzeAIVisionTaggingRequest$Outbound;
}

export function analyzeAIVisionTaggingRequestToJSON(
  analyzeAIVisionTaggingRequest: AnalyzeAIVisionTaggingRequest,
): string {
  return JSON.stringify(
    AnalyzeAIVisionTaggingRequest$outboundSchema.parse(
      analyzeAIVisionTaggingRequest,
    ),
  );
}

export function analyzeAIVisionTaggingRequestFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeAIVisionTaggingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeAIVisionTaggingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeAIVisionTaggingRequest' from JSON`,
  );
}
