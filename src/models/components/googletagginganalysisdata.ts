/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Labels = {
  label: string;
  score: number;
};

export type LabelAnnotations = {
  labels?: Array<Labels> | undefined;
};

export type GoogleTaggingAnalysisData = {
  labelAnnotations: LabelAnnotations;
};

/** @internal */
export const Labels$inboundSchema: z.ZodType<Labels, z.ZodTypeDef, unknown> = z
  .object({
    label: z.string(),
    score: z.number(),
  });

/** @internal */
export type Labels$Outbound = {
  label: string;
  score: number;
};

/** @internal */
export const Labels$outboundSchema: z.ZodType<
  Labels$Outbound,
  z.ZodTypeDef,
  Labels
> = z.object({
  label: z.string(),
  score: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Labels$ {
  /** @deprecated use `Labels$inboundSchema` instead. */
  export const inboundSchema = Labels$inboundSchema;
  /** @deprecated use `Labels$outboundSchema` instead. */
  export const outboundSchema = Labels$outboundSchema;
  /** @deprecated use `Labels$Outbound` instead. */
  export type Outbound = Labels$Outbound;
}

export function labelsToJSON(labels: Labels): string {
  return JSON.stringify(Labels$outboundSchema.parse(labels));
}

export function labelsFromJSON(
  jsonString: string,
): SafeParseResult<Labels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Labels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Labels' from JSON`,
  );
}

/** @internal */
export const LabelAnnotations$inboundSchema: z.ZodType<
  LabelAnnotations,
  z.ZodTypeDef,
  unknown
> = z.object({
  labels: z.array(z.lazy(() => Labels$inboundSchema)).optional(),
});

/** @internal */
export type LabelAnnotations$Outbound = {
  labels?: Array<Labels$Outbound> | undefined;
};

/** @internal */
export const LabelAnnotations$outboundSchema: z.ZodType<
  LabelAnnotations$Outbound,
  z.ZodTypeDef,
  LabelAnnotations
> = z.object({
  labels: z.array(z.lazy(() => Labels$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LabelAnnotations$ {
  /** @deprecated use `LabelAnnotations$inboundSchema` instead. */
  export const inboundSchema = LabelAnnotations$inboundSchema;
  /** @deprecated use `LabelAnnotations$outboundSchema` instead. */
  export const outboundSchema = LabelAnnotations$outboundSchema;
  /** @deprecated use `LabelAnnotations$Outbound` instead. */
  export type Outbound = LabelAnnotations$Outbound;
}

export function labelAnnotationsToJSON(
  labelAnnotations: LabelAnnotations,
): string {
  return JSON.stringify(
    LabelAnnotations$outboundSchema.parse(labelAnnotations),
  );
}

export function labelAnnotationsFromJSON(
  jsonString: string,
): SafeParseResult<LabelAnnotations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LabelAnnotations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LabelAnnotations' from JSON`,
  );
}

/** @internal */
export const GoogleTaggingAnalysisData$inboundSchema: z.ZodType<
  GoogleTaggingAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  label_annotations: z.lazy(() => LabelAnnotations$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "label_annotations": "labelAnnotations",
  });
});

/** @internal */
export type GoogleTaggingAnalysisData$Outbound = {
  label_annotations: LabelAnnotations$Outbound;
};

/** @internal */
export const GoogleTaggingAnalysisData$outboundSchema: z.ZodType<
  GoogleTaggingAnalysisData$Outbound,
  z.ZodTypeDef,
  GoogleTaggingAnalysisData
> = z.object({
  labelAnnotations: z.lazy(() => LabelAnnotations$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    labelAnnotations: "label_annotations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleTaggingAnalysisData$ {
  /** @deprecated use `GoogleTaggingAnalysisData$inboundSchema` instead. */
  export const inboundSchema = GoogleTaggingAnalysisData$inboundSchema;
  /** @deprecated use `GoogleTaggingAnalysisData$outboundSchema` instead. */
  export const outboundSchema = GoogleTaggingAnalysisData$outboundSchema;
  /** @deprecated use `GoogleTaggingAnalysisData$Outbound` instead. */
  export type Outbound = GoogleTaggingAnalysisData$Outbound;
}

export function googleTaggingAnalysisDataToJSON(
  googleTaggingAnalysisData: GoogleTaggingAnalysisData,
): string {
  return JSON.stringify(
    GoogleTaggingAnalysisData$outboundSchema.parse(googleTaggingAnalysisData),
  );
}

export function googleTaggingAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<GoogleTaggingAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GoogleTaggingAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GoogleTaggingAnalysisData' from JSON`,
  );
}
