/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LvisAnalysisDataTags = {};

export type LvisAnalysisData = {
  tags: LvisAnalysisDataTags;
  modelVersion?: number | undefined;
};

/** @internal */
export const LvisAnalysisDataTags$inboundSchema: z.ZodType<
  LvisAnalysisDataTags,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LvisAnalysisDataTags$Outbound = {};

/** @internal */
export const LvisAnalysisDataTags$outboundSchema: z.ZodType<
  LvisAnalysisDataTags$Outbound,
  z.ZodTypeDef,
  LvisAnalysisDataTags
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LvisAnalysisDataTags$ {
  /** @deprecated use `LvisAnalysisDataTags$inboundSchema` instead. */
  export const inboundSchema = LvisAnalysisDataTags$inboundSchema;
  /** @deprecated use `LvisAnalysisDataTags$outboundSchema` instead. */
  export const outboundSchema = LvisAnalysisDataTags$outboundSchema;
  /** @deprecated use `LvisAnalysisDataTags$Outbound` instead. */
  export type Outbound = LvisAnalysisDataTags$Outbound;
}

export function lvisAnalysisDataTagsToJSON(
  lvisAnalysisDataTags: LvisAnalysisDataTags,
): string {
  return JSON.stringify(
    LvisAnalysisDataTags$outboundSchema.parse(lvisAnalysisDataTags),
  );
}

export function lvisAnalysisDataTagsFromJSON(
  jsonString: string,
): SafeParseResult<LvisAnalysisDataTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LvisAnalysisDataTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LvisAnalysisDataTags' from JSON`,
  );
}

/** @internal */
export const LvisAnalysisData$inboundSchema: z.ZodType<
  LvisAnalysisData,
  z.ZodTypeDef,
  unknown
> = z.object({
  tags: z.lazy(() => LvisAnalysisDataTags$inboundSchema),
  model_version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_version": "modelVersion",
  });
});

/** @internal */
export type LvisAnalysisData$Outbound = {
  tags: LvisAnalysisDataTags$Outbound;
  model_version?: number | undefined;
};

/** @internal */
export const LvisAnalysisData$outboundSchema: z.ZodType<
  LvisAnalysisData$Outbound,
  z.ZodTypeDef,
  LvisAnalysisData
> = z.object({
  tags: z.lazy(() => LvisAnalysisDataTags$outboundSchema),
  modelVersion: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    modelVersion: "model_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LvisAnalysisData$ {
  /** @deprecated use `LvisAnalysisData$inboundSchema` instead. */
  export const inboundSchema = LvisAnalysisData$inboundSchema;
  /** @deprecated use `LvisAnalysisData$outboundSchema` instead. */
  export const outboundSchema = LvisAnalysisData$outboundSchema;
  /** @deprecated use `LvisAnalysisData$Outbound` instead. */
  export type Outbound = LvisAnalysisData$Outbound;
}

export function lvisAnalysisDataToJSON(
  lvisAnalysisData: LvisAnalysisData,
): string {
  return JSON.stringify(
    LvisAnalysisData$outboundSchema.parse(lvisAnalysisData),
  );
}

export function lvisAnalysisDataFromJSON(
  jsonString: string,
): SafeParseResult<LvisAnalysisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LvisAnalysisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LvisAnalysisData' from JSON`,
  );
}
