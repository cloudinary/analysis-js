/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CldTextAnalysisData,
  CldTextAnalysisData$inboundSchema,
  CldTextAnalysisData$Outbound,
  CldTextAnalysisData$outboundSchema,
} from "./cldtextanalysisdata.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";

export type AnalyzeCldTextResponseData = {
  entity?: string | undefined;
  analysis?: CldTextAnalysisData | undefined;
};

export type AnalyzeCldTextResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeCldTextResponseData | undefined;
};

/** @internal */
export const AnalyzeCldTextResponseData$inboundSchema: z.ZodType<
  AnalyzeCldTextResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: CldTextAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeCldTextResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: CldTextAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeCldTextResponseData$outboundSchema: z.ZodType<
  AnalyzeCldTextResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeCldTextResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: CldTextAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeCldTextResponseData$ {
  /** @deprecated use `AnalyzeCldTextResponseData$inboundSchema` instead. */
  export const inboundSchema = AnalyzeCldTextResponseData$inboundSchema;
  /** @deprecated use `AnalyzeCldTextResponseData$outboundSchema` instead. */
  export const outboundSchema = AnalyzeCldTextResponseData$outboundSchema;
  /** @deprecated use `AnalyzeCldTextResponseData$Outbound` instead. */
  export type Outbound = AnalyzeCldTextResponseData$Outbound;
}

export function analyzeCldTextResponseDataToJSON(
  analyzeCldTextResponseData: AnalyzeCldTextResponseData,
): string {
  return JSON.stringify(
    AnalyzeCldTextResponseData$outboundSchema.parse(analyzeCldTextResponseData),
  );
}

export function analyzeCldTextResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeCldTextResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeCldTextResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeCldTextResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeCldTextResponse$inboundSchema: z.ZodType<
  AnalyzeCldTextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeCldTextResponseData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeCldTextResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeCldTextResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeCldTextResponse$outboundSchema: z.ZodType<
  AnalyzeCldTextResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeCldTextResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeCldTextResponseData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeCldTextResponse$ {
  /** @deprecated use `AnalyzeCldTextResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeCldTextResponse$inboundSchema;
  /** @deprecated use `AnalyzeCldTextResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeCldTextResponse$outboundSchema;
  /** @deprecated use `AnalyzeCldTextResponse$Outbound` instead. */
  export type Outbound = AnalyzeCldTextResponse$Outbound;
}

export function analyzeCldTextResponseToJSON(
  analyzeCldTextResponse: AnalyzeCldTextResponse,
): string {
  return JSON.stringify(
    AnalyzeCldTextResponse$outboundSchema.parse(analyzeCldTextResponse),
  );
}

export function analyzeCldTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeCldTextResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeCldTextResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeCldTextResponse' from JSON`,
  );
}
