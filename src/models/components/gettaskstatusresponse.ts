/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskStatus,
  TaskStatus$inboundSchema,
  TaskStatus$outboundSchema,
} from "./taskstatus.js";

export type GetTaskStatusResponseData = {
  taskId?: string | undefined;
  /**
   * The status of an async task
   */
  status?: TaskStatus | undefined;
};

export type GetTaskStatusResponse = {
  data?: GetTaskStatusResponseData | undefined;
  requestId?: string | undefined;
};

/** @internal */
export const GetTaskStatusResponseData$inboundSchema: z.ZodType<
  GetTaskStatusResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  task_id: z.string().optional(),
  status: TaskStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "task_id": "taskId",
  });
});

/** @internal */
export type GetTaskStatusResponseData$Outbound = {
  task_id?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const GetTaskStatusResponseData$outboundSchema: z.ZodType<
  GetTaskStatusResponseData$Outbound,
  z.ZodTypeDef,
  GetTaskStatusResponseData
> = z.object({
  taskId: z.string().optional(),
  status: TaskStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    taskId: "task_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTaskStatusResponseData$ {
  /** @deprecated use `GetTaskStatusResponseData$inboundSchema` instead. */
  export const inboundSchema = GetTaskStatusResponseData$inboundSchema;
  /** @deprecated use `GetTaskStatusResponseData$outboundSchema` instead. */
  export const outboundSchema = GetTaskStatusResponseData$outboundSchema;
  /** @deprecated use `GetTaskStatusResponseData$Outbound` instead. */
  export type Outbound = GetTaskStatusResponseData$Outbound;
}

export function getTaskStatusResponseDataToJSON(
  getTaskStatusResponseData: GetTaskStatusResponseData,
): string {
  return JSON.stringify(
    GetTaskStatusResponseData$outboundSchema.parse(getTaskStatusResponseData),
  );
}

export function getTaskStatusResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<GetTaskStatusResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTaskStatusResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTaskStatusResponseData' from JSON`,
  );
}

/** @internal */
export const GetTaskStatusResponse$inboundSchema: z.ZodType<
  GetTaskStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetTaskStatusResponseData$inboundSchema).optional(),
  request_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type GetTaskStatusResponse$Outbound = {
  data?: GetTaskStatusResponseData$Outbound | undefined;
  request_id?: string | undefined;
};

/** @internal */
export const GetTaskStatusResponse$outboundSchema: z.ZodType<
  GetTaskStatusResponse$Outbound,
  z.ZodTypeDef,
  GetTaskStatusResponse
> = z.object({
  data: z.lazy(() => GetTaskStatusResponseData$outboundSchema).optional(),
  requestId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTaskStatusResponse$ {
  /** @deprecated use `GetTaskStatusResponse$inboundSchema` instead. */
  export const inboundSchema = GetTaskStatusResponse$inboundSchema;
  /** @deprecated use `GetTaskStatusResponse$outboundSchema` instead. */
  export const outboundSchema = GetTaskStatusResponse$outboundSchema;
  /** @deprecated use `GetTaskStatusResponse$Outbound` instead. */
  export type Outbound = GetTaskStatusResponse$Outbound;
}

export function getTaskStatusResponseToJSON(
  getTaskStatusResponse: GetTaskStatusResponse,
): string {
  return JSON.stringify(
    GetTaskStatusResponse$outboundSchema.parse(getTaskStatusResponse),
  );
}

export function getTaskStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTaskStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTaskStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTaskStatusResponse' from JSON`,
  );
}
