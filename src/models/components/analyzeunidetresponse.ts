/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LimitsObject,
  LimitsObject$inboundSchema,
  LimitsObject$Outbound,
  LimitsObject$outboundSchema,
} from "./limitsobject.js";
import {
  UnidetAnalysisData,
  UnidetAnalysisData$inboundSchema,
  UnidetAnalysisData$Outbound,
  UnidetAnalysisData$outboundSchema,
} from "./unidetanalysisdata.js";

export type AnalyzeUnidetResponseData = {
  entity?: string | undefined;
  analysis?: UnidetAnalysisData | undefined;
};

export type AnalyzeUnidetResponse = {
  limits?: LimitsObject | null | undefined;
  requestId?: string | undefined;
  data?: AnalyzeUnidetResponseData | undefined;
};

/** @internal */
export const AnalyzeUnidetResponseData$inboundSchema: z.ZodType<
  AnalyzeUnidetResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.string().optional(),
  analysis: UnidetAnalysisData$inboundSchema.optional(),
});

/** @internal */
export type AnalyzeUnidetResponseData$Outbound = {
  entity?: string | undefined;
  analysis?: UnidetAnalysisData$Outbound | undefined;
};

/** @internal */
export const AnalyzeUnidetResponseData$outboundSchema: z.ZodType<
  AnalyzeUnidetResponseData$Outbound,
  z.ZodTypeDef,
  AnalyzeUnidetResponseData
> = z.object({
  entity: z.string().optional(),
  analysis: UnidetAnalysisData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeUnidetResponseData$ {
  /** @deprecated use `AnalyzeUnidetResponseData$inboundSchema` instead. */
  export const inboundSchema = AnalyzeUnidetResponseData$inboundSchema;
  /** @deprecated use `AnalyzeUnidetResponseData$outboundSchema` instead. */
  export const outboundSchema = AnalyzeUnidetResponseData$outboundSchema;
  /** @deprecated use `AnalyzeUnidetResponseData$Outbound` instead. */
  export type Outbound = AnalyzeUnidetResponseData$Outbound;
}

export function analyzeUnidetResponseDataToJSON(
  analyzeUnidetResponseData: AnalyzeUnidetResponseData,
): string {
  return JSON.stringify(
    AnalyzeUnidetResponseData$outboundSchema.parse(analyzeUnidetResponseData),
  );
}

export function analyzeUnidetResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeUnidetResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeUnidetResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeUnidetResponseData' from JSON`,
  );
}

/** @internal */
export const AnalyzeUnidetResponse$inboundSchema: z.ZodType<
  AnalyzeUnidetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  limits: z.nullable(LimitsObject$inboundSchema).optional(),
  request_id: z.string().optional(),
  data: z.lazy(() => AnalyzeUnidetResponseData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
  });
});

/** @internal */
export type AnalyzeUnidetResponse$Outbound = {
  limits?: LimitsObject$Outbound | null | undefined;
  request_id?: string | undefined;
  data?: AnalyzeUnidetResponseData$Outbound | undefined;
};

/** @internal */
export const AnalyzeUnidetResponse$outboundSchema: z.ZodType<
  AnalyzeUnidetResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeUnidetResponse
> = z.object({
  limits: z.nullable(LimitsObject$outboundSchema).optional(),
  requestId: z.string().optional(),
  data: z.lazy(() => AnalyzeUnidetResponseData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeUnidetResponse$ {
  /** @deprecated use `AnalyzeUnidetResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeUnidetResponse$inboundSchema;
  /** @deprecated use `AnalyzeUnidetResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeUnidetResponse$outboundSchema;
  /** @deprecated use `AnalyzeUnidetResponse$Outbound` instead. */
  export type Outbound = AnalyzeUnidetResponse$Outbound;
}

export function analyzeUnidetResponseToJSON(
  analyzeUnidetResponse: AnalyzeUnidetResponse,
): string {
  return JSON.stringify(
    AnalyzeUnidetResponse$outboundSchema.parse(analyzeUnidetResponse),
  );
}

export function analyzeUnidetResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeUnidetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeUnidetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeUnidetResponse' from JSON`,
  );
}
