/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AnalyzeHumanAnatomyResponse =
  | components.AnalyzeHumanAnatomyResponse
  | components.AsyncOperationAcceptedResponse;

/** @internal */
export const AnalyzeHumanAnatomyResponse$inboundSchema: z.ZodType<
  AnalyzeHumanAnatomyResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.AnalyzeHumanAnatomyResponse$inboundSchema,
  components.AsyncOperationAcceptedResponse$inboundSchema,
]);

/** @internal */
export type AnalyzeHumanAnatomyResponse$Outbound =
  | components.AnalyzeHumanAnatomyResponse$Outbound
  | components.AsyncOperationAcceptedResponse$Outbound;

/** @internal */
export const AnalyzeHumanAnatomyResponse$outboundSchema: z.ZodType<
  AnalyzeHumanAnatomyResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeHumanAnatomyResponse
> = z.union([
  components.AnalyzeHumanAnatomyResponse$outboundSchema,
  components.AsyncOperationAcceptedResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeHumanAnatomyResponse$ {
  /** @deprecated use `AnalyzeHumanAnatomyResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeHumanAnatomyResponse$inboundSchema;
  /** @deprecated use `AnalyzeHumanAnatomyResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeHumanAnatomyResponse$outboundSchema;
  /** @deprecated use `AnalyzeHumanAnatomyResponse$Outbound` instead. */
  export type Outbound = AnalyzeHumanAnatomyResponse$Outbound;
}

export function analyzeHumanAnatomyResponseToJSON(
  analyzeHumanAnatomyResponse: AnalyzeHumanAnatomyResponse,
): string {
  return JSON.stringify(
    AnalyzeHumanAnatomyResponse$outboundSchema.parse(
      analyzeHumanAnatomyResponse,
    ),
  );
}

export function analyzeHumanAnatomyResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeHumanAnatomyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeHumanAnatomyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeHumanAnatomyResponse' from JSON`,
  );
}
