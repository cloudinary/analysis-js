/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AnalyzeAiVisionModerationResponse =
  | components.AsyncOperationAcceptedResponse
  | components.AnalyzeAIVisionModerationResponse;

/** @internal */
export const AnalyzeAiVisionModerationResponse$inboundSchema: z.ZodType<
  AnalyzeAiVisionModerationResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.AsyncOperationAcceptedResponse$inboundSchema,
  components.AnalyzeAIVisionModerationResponse$inboundSchema,
]);

/** @internal */
export type AnalyzeAiVisionModerationResponse$Outbound =
  | components.AsyncOperationAcceptedResponse$Outbound
  | components.AnalyzeAIVisionModerationResponse$Outbound;

/** @internal */
export const AnalyzeAiVisionModerationResponse$outboundSchema: z.ZodType<
  AnalyzeAiVisionModerationResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeAiVisionModerationResponse
> = z.union([
  components.AsyncOperationAcceptedResponse$outboundSchema,
  components.AnalyzeAIVisionModerationResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeAiVisionModerationResponse$ {
  /** @deprecated use `AnalyzeAiVisionModerationResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeAiVisionModerationResponse$inboundSchema;
  /** @deprecated use `AnalyzeAiVisionModerationResponse$outboundSchema` instead. */
  export const outboundSchema =
    AnalyzeAiVisionModerationResponse$outboundSchema;
  /** @deprecated use `AnalyzeAiVisionModerationResponse$Outbound` instead. */
  export type Outbound = AnalyzeAiVisionModerationResponse$Outbound;
}

export function analyzeAiVisionModerationResponseToJSON(
  analyzeAiVisionModerationResponse: AnalyzeAiVisionModerationResponse,
): string {
  return JSON.stringify(
    AnalyzeAiVisionModerationResponse$outboundSchema.parse(
      analyzeAiVisionModerationResponse,
    ),
  );
}

export function analyzeAiVisionModerationResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeAiVisionModerationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeAiVisionModerationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeAiVisionModerationResponse' from JSON`,
  );
}
