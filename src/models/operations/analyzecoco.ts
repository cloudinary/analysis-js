/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AnalyzeCocoResponse =
  | components.AsyncOperationAcceptedResponse
  | components.AnalyzeCocoResponse;

/** @internal */
export const AnalyzeCocoResponse$inboundSchema: z.ZodType<
  AnalyzeCocoResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.AsyncOperationAcceptedResponse$inboundSchema,
  components.AnalyzeCocoResponse$inboundSchema,
]);

/** @internal */
export type AnalyzeCocoResponse$Outbound =
  | components.AsyncOperationAcceptedResponse$Outbound
  | components.AnalyzeCocoResponse$Outbound;

/** @internal */
export const AnalyzeCocoResponse$outboundSchema: z.ZodType<
  AnalyzeCocoResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeCocoResponse
> = z.union([
  components.AsyncOperationAcceptedResponse$outboundSchema,
  components.AnalyzeCocoResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeCocoResponse$ {
  /** @deprecated use `AnalyzeCocoResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeCocoResponse$inboundSchema;
  /** @deprecated use `AnalyzeCocoResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeCocoResponse$outboundSchema;
  /** @deprecated use `AnalyzeCocoResponse$Outbound` instead. */
  export type Outbound = AnalyzeCocoResponse$Outbound;
}

export function analyzeCocoResponseToJSON(
  analyzeCocoResponse: AnalyzeCocoResponse,
): string {
  return JSON.stringify(
    AnalyzeCocoResponse$outboundSchema.parse(analyzeCocoResponse),
  );
}

export function analyzeCocoResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeCocoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeCocoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeCocoResponse' from JSON`,
  );
}
