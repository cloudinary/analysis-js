/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AnalyzeCaptioningResponse =
  | components.AsyncOperationAcceptedResponse
  | components.AnalyzeCaptioningResponse;

/** @internal */
export const AnalyzeCaptioningResponse$inboundSchema: z.ZodType<
  AnalyzeCaptioningResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.AsyncOperationAcceptedResponse$inboundSchema,
  components.AnalyzeCaptioningResponse$inboundSchema,
]);

/** @internal */
export type AnalyzeCaptioningResponse$Outbound =
  | components.AsyncOperationAcceptedResponse$Outbound
  | components.AnalyzeCaptioningResponse$Outbound;

/** @internal */
export const AnalyzeCaptioningResponse$outboundSchema: z.ZodType<
  AnalyzeCaptioningResponse$Outbound,
  z.ZodTypeDef,
  AnalyzeCaptioningResponse
> = z.union([
  components.AsyncOperationAcceptedResponse$outboundSchema,
  components.AnalyzeCaptioningResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyzeCaptioningResponse$ {
  /** @deprecated use `AnalyzeCaptioningResponse$inboundSchema` instead. */
  export const inboundSchema = AnalyzeCaptioningResponse$inboundSchema;
  /** @deprecated use `AnalyzeCaptioningResponse$outboundSchema` instead. */
  export const outboundSchema = AnalyzeCaptioningResponse$outboundSchema;
  /** @deprecated use `AnalyzeCaptioningResponse$Outbound` instead. */
  export type Outbound = AnalyzeCaptioningResponse$Outbound;
}

export function analyzeCaptioningResponseToJSON(
  analyzeCaptioningResponse: AnalyzeCaptioningResponse,
): string {
  return JSON.stringify(
    AnalyzeCaptioningResponse$outboundSchema.parse(analyzeCaptioningResponse),
  );
}

export function analyzeCaptioningResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnalyzeCaptioningResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyzeCaptioningResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyzeCaptioningResponse' from JSON`,
  );
}
